Comprenez le rôle du HTML

Le HTML (HyperText Markup Language) a fait son apparition dès 1991 lors du lancement du Web. Son rôle est de gérer et d’organiser le contenu.

C'est donc en HTML que vous écrirez ce qui doit être affiché sur la page : du texte, des liens, des images… En “français”, cela consiste à dire par exemple : “Ceci est mon titre”, “Ceci est mon menu”, “Voici une image à afficher”, etc.

Souvenez-vous ! Dans la vidéo qui introduit ce chapitre, vous avez vu à quoi ressemble le site OpenClassrooms sans aucun CSS, juste en HTML pur. Sans CSS, le contenu du site web d’OpenClassrooms s’affiche sans aucune mise en forme particulière.

Bref, vous l'aurez compris : vous pouvez très bien créer un site web uniquement en HTML… Mais celui-ci ne sera pas très beau car l'information apparaîtra “brute” et sans aucune mise en forme. C'est pour cela que le langage CSS vient toujours le compléter.

Comprenez le rôle du CSS

Le CSS (Cascading Style Sheets, aussi appelées feuilles de style) a pour rôle de gérer l'apparence de la page web (agencement, positionnement, décoration, couleurs, taille du texte…). Ce langage est venu compléter le HTML en 1996, et il est toujours au fondement même du style du Web de nos jours.

Comme vous pouvez le voir, le site d'OpenClassrooms a bien meilleure allure avec du CSS. La couche CSS permet de voir le site web d’OpenClassrooms dans sa mise en forme graphique aboutie.

Le CSS a besoin d'une base en HTML pour fonctionner. C'est pour cela que nous allons d'abord apprendre à coder en HTML avant de nous occuper du style en CSS. Vos premières pages ne seront donc pas des plus esthétiques au début, mais c'est normal et cela ne durera pas longtemps.

Comprenez le rôle du navigateur

Les rôles du HTML et du CSS se complètent. Mais ensuite, c’est le navigateur web qui fait le reste du travail : lire le code HTML et CSS pour afficher un résultat visuel à l'écran. Si votre code CSS dit “Les titres sont en rouge”, alors le navigateur affichera les titres en rouge.

Le rôle du navigateur est donc essentiel !

On ne dirait pas comme ça, mais un navigateur est un programme extrêmement complexe. En effet, comprendre le code HTML et CSS n'est pas une mince affaire.

Les différents navigateurs n'affichent pas toujours le même site exactement de la même façon ! Il faudra vous y faire, et prendre l'habitude de vérifier régulièrement que votre site fonctionne correctement sur les navigateurs les plus utilisés.

Aujourd'hui, vous apprenez à développer dans un environnement quasi magique : tous les navigateurs que vous utilisez embarquent des outils de développement particulièrement sophistiqués, notamment l’outil d’inspection d’une page web.

En effet, l'inspection d'une page web permet très simplement d'accéder au HTML et au CSS, et de faire des changements en temps réel. Pour cela, il vous suffit de faire un clic droit sur n'importe quelle page, et de sélectionner l'inspecteur.

La manière d'accéder à l'inspecteur peut varier selon le navigateur que vous utilisez. Vous trouverez une liste des différentes manières d'y arriver sur cette page. Depuis Chrome, en un clic droit, vous pouvez inspecter le HTML et le CSS d'un site web.

En résumé :

Le HTML constitue la structure d'une page web.

Le CSS permet d'ajouter du style.

Les deux langages se complètent avec un rôle bien défini pour chacun.

Le navigateur est un logiciel qui permet de lire les langages du Web : HTML et CSS.

Tous les navigateurs embarquent des outils de développement, dont l'outil d'inspection qui permet d'accéder au HTML et au CSS d'une page.

Alors, vous commencez à y voir plus clair sur la structure d'une page ? Et vous avez pu vous amuser à modifier le contenu de vos pages web favorites ? Parfait ! Parce que nous allons rentrer tout de suite dans le vif du sujet en construisant notre première page HTML !

################################################################################################################

Pour créer une page web en HTML, il suffit de créer un fichier ayant l'extension .html. Ce fichier s'ouvre dans le navigateur web simplement en faisant un double-clic dessus.

Appropriez-vous les balises HTML
Le langage HTML utilise ce qu'on appelle des balises. On les écrit entre chevrons  <  et  >

Et elles servent à quoi les balises concrètement ?

Les balises indiquent la nature du texte qu'elles encadrent. Elles permettent au navigateur de comprendre ce qu'il faut afficher à l'écran pour les visiteurs d'un site web.

Si elles pouvaient parler, elles diraient :

<title> </title>  : “Ceci est le titre de la page”,

<img>: “Ceci est une image”,

<p> </p>: “Ceci est un paragraphe de texte”, etc.

Ah tiens, pourquoi certaines balises sont doublées et prennent un / dans leur syntaxe ?

On distingue deux types de balises :

Les balises en paires (une balise ouvrante et une balise fermante)

Et les balises orphelines (une seule balise).

Les balises en paires
Elles s'ouvrent, contiennent du texte, et se ferment plus loin. Si on prend la balise  title  qui correspond au titre de la page, voilà ce que ça nous donne :

<title>Ceci est le titre de ma page</title>
On a donc :

Une balise ouvrante :   <title> ;

Et une balise fermante : </title>  . 

Cela délimite ce qui sera traduit par un titre. Pour l'ordinateur, tout ce qui n'est pas entre ces deux balises n'est pas un titre.

Les balises orphelines
Ce sont des balises qui servent le plus souvent à insérer un élément à un endroit précis (par exemple une image). Il n'est pas nécessaire de délimiter le début et la fin de l'image, on veut juste dire à l'ordinateur “Insère une image ici”. Il n'y a donc pas besoin de faire une balise ouvrante et une fermante, d'où l'appellation "balise orpheline".

Une balise orpheline s'écrit comme ceci :  <img>

Jusqu'à il y,a peu, on mettait un  /  à la fin des balises orphelines pour dire qu'elles étaient autofermantes, comme ceci :  <img />  .

Cette syntaxe génère maintenant un avertissement sous W3C.  Il n'est donc pas recommandé de mettre un slash à la fin d'une balise orpheline. Si vous vouliez le faire néanmoins, n’oubliez pas de mettre des guillemets aux valeurs de vos attributs. Par exemple :<img src=”…” alt=”…” />

Dans les prochains chapitres, on utilisera, en plus des balises, des attributs. Les attributs sont un peu les options des balises. Ils viennent les compléter pour donner des informations supplémentaires.

Un attribut est situé dans la balise ouvrante d'une balise en paire, ou directement dans une balise orpheline, comme c'est le cas ci dessous avec la balise  <img>  :

Pour écrire votre première vraie page web en HTML, ouvrez votre fichier index.html sous Visual Studio Code et copiez-collez le code ci-dessous à la place de ce que vous aviez juste avant. 

<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="utf-8">
        <title>Le titre de ma page</title>
    </head>
    <body>
    </body>
</html>

Tiens c'est quoi ce lang="fr"? On ne l'a pas vu dans la vidéo.

Bien vu ! Il s'agit d'un attribut. Nous l'avons ajouté pour préciser la langue du site web que l'on va créer : lang=”fr”. Ce n’est pas obligatoire (la balise <html>  seule n’empêche pas le code de fonctionner), c’est simplement que si vous codez un site web en langue française, cela vous évite de potentiels soucis d’affichage. En outre, cela permet de mettre la langue par défaut de votre site web sur le français. 

Pour rester simple et vous permettre d’adapter facilement à une autre langue les exemples de code vus dans les vidéos et le texte, nous garderons la balise <html> pour la suite du cours.

Bref, revenons à nos moutons…

Oui, d'ailleurs, l'ordre des balises est important dans cette structure de base ?

OUI ! Les balises s'ouvrent puis se ferment, et elles s'emboitent les unes dans les autres dans un ordre précis.

La syntaxe  <html><body></html></body>  est incorrecte : les balises s'entremêlent.

La syntaxe  <html><body></body></html>  est correcte : une balise qui est ouverte à l'intérieur d'une autre balise doit aussi être fermée à l'intérieur de celle-ci.

On a ainsi des éléments dits "parents", qui vont contenir d'autres éléments dits "enfants".

Voyons à quoi servent toutes ces balises.

La première ligne  <!DOCTYPE html> est une balise orpheline indispensable : elle indique qu'il s'agit d'une page HTML.

La balise en paire <html> </html> englobe tout le contenu de la page web. A l'intérieur, il y a les balises en paire <head> </head> et <body> </body>.

Pour rappel, c’est dans cette balise qu'on peut préciser la langue par défaut du site web :

<html lang=”fr”>  pour le français ;

<html lang=”en”>  pour l’anglais ;

<html lang=”es”>  pour l’espagnol…

La balise en paire <head> </head> contient deux balises qui donnent des informations au navigateur : l’encodage et le titre de la page.

La balise orpheline <meta charset="utf-8"> indique l'encodage utilisé dans le fichier  .html : cela détermine comment les caractères spéciaux s'affichent (accents, idéogrammes chinois et japonais, etc.).

Si les accents s'affichent mal par la suite, c'est qu'il y a un problème avec l'encodage. Vérifiez que la balise meta indique bien UTF-8, et que votre fichier est enregistré en UTF-8.

La balise en paire <title> </title> indique au navigateur le titre de la page web. Toute page doit avoir un titre qui décrit ce qu'elle contient, il s'affichera dans l'onglet du navigateur, et apparaîtra dans les résultats de recherche, comme sur Google. Autant vous dire que bien choisir son titre est important !

La balise en paire <body> </body> contient tout ce qui sera affiché à l'écran sur la page web.

Un commentaire en HTML est un texte qui sert simplement de mémo. Il n'est pas affiché, il n'est pas lu par l'ordinateur, cela ne change rien à l'affichage de la page.

OK, ça ne sert à rien alors ?!

Si ! Cela sert à vous qui développez et aux personnes qui liront le code source de votre page. Vous pouvez utiliser les commentaires pour laisser des indications sur le fonctionnement de votre page. Cela vous permettra de vous rappeler comment fonctionne votre page si vous revenez sur votre code source après un long moment d'absence.

Et on fait comment pour écrire un commentaire ?

Un commentaire est une balise HTML avec une forme bien spéciale :

<!-- Ceci est un commentaire -->

Vous pouvez le mettre où vous voulez au sein de votre code source.

Attention, tout le monde peut voir le code HTML source de votre page, une fois celle-ci mise en ligne sur le Web, avec l’outil d’inspection. Vos commentaires seront donc également visibles en faisant “Afficher le code source de la page”. Par conséquent, ne mettez pas d'informations sensibles comme des mots de passe dans les commentaires… et soignez votre code source, car je pourrai venir vérifier si vous avez bien suivi le cours à la lettre !

D'ailleurs, dans la plupart des éditeurs de code, il existe un raccourci pour commenter une ligne de code très rapidement.

Sur Visual Studio Code, pour transformer une ligne (ou même plusieurs lignes) en commentaire :

sélectionnez la ligne (ou les lignes) en question :

utilisez le raccourci clavier avec la touche CTRL + k puis CTRL + c  (ou ⌘ command + k puis  ⌘ command + c sur mac).


À vous de jouer !
C'est maintenant le moment de mettre en pratique ce que vous avez appris.

Pour cet exercice, vous allez devoir partir de votre fichier index.html que vous venez de créer et :

y insérer la structure de base HTML ;

changer le contenu de la balise  <title> </title>  pour avoir “Accueil – Robbie Lens Photographie” ;

écrire un commentaire dans <body> </body> .

Ici, vous partirez de zéro dans un fichier depuis Visual Studio Code pour commencer cet exercice. Un peu perdu ? Pas de panique, voici le corrigé de l'exercice P1C3.

En cliquant sur le lien du corrigé, vous allez arriver sur la branche P1C3-solution :

Pour consulter le code du corrigé de l’exercice, vous pouvez cliquer sur le fichier   index.html  ou cliquer en haut à droite sur le bouton vert Code pour le télécharger (“download”). Vous pourrez alors l’ouvrir depuis votre ordinateur avec l’éditeur Visual Studio Code (que vous avez normalement téléchargé au début de ce chapitre).

Pour consulter le code du corrigé de l’exercice, vous pouvez cliquer sur le fichier   index.html  ou cliquer en haut à droite sur le bouton vert Code pour le télécharger (“download”). Vous pourrez alors l’ouvrir depuis votre ordinateur avec l’éditeur Visual Studio Code (que vous avez normalement téléchargé au début de ce chapitre).


En résumé
Pour créer une page web, on crée un fichier ayant l'extension  .html  , qui pourra être ouvert dans le navigateur web simplement en faisant un double-clic dessus.

Chaque fichier HTML est constitué de balises.

Les balises peuvent avoir plusieurs formes :

<balise> </balise>  : balises en paires, elles s'ouvrent et se ferment pour délimiter le contenu (début et fin d'un titre, par exemple) ;

<balise>  : balises orphelines (on ne les insère qu'en un seul exemplaire), elles permettent d'insérer un élément à un endroit précis (par exemple une image).

Les balises sont parfois accompagnées d'attributs pour donner des indications supplémentaires, ou paramétrer un élément (exemple :  <img src="photo.jpg">  ).

Une page web est constituée de deux sections principales : l'en-tête<head> </head>  dont le contenu n'apparaît pas dans l'affichage de la page et le corps <body> </body>  qui, lui, apparaît.

Félicitations ! Vous avez créé votre première page web ! Vous pouvez être fier de vous ! Dans le chapitre suivant, nous allons rentrer un peu plus dans le détail, en apprenant à organiser son texte en HTML. Alors à tout de suite ! 

#################################################################################################################

Le texte affiché sur une page web est compris entre les balises <body> </body>.

C'est donc dans <body> </body> que nous allons écrire du texte à afficher en utilisant des balises HTML pour le structurer grâce à des paragraphes, des titres, des listes ou encore mettre en avant du texte important.

Créez des paragraphes avec les balises <p> </p>
Les balises <p> </p> permettent de délimiter des paragraphes en HTML :

<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="utf-8">
        <title>Ma page</title>
    </head>
    <body>
        <p>Ceci est le contenu de mon premier paragraphe</p>
        <p>Ceci est le contenu de mon deuxième paragraphe</p>
    </body>
</html>

Oui, mais si je veux juste revenir à la ligne sans créer un paragraphe à chaque fois ?

Eh bien devinez quoi : il existe une balise pour cela !

Revenez à la ligne avec la balise orpheline <br>

Pour revenir à la ligne, on utilise la balise orpheline  <br> (pour break), on n'a donc pas besoin de la fermer :

<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="utf-8">
        <title>Ma page</title>
    </head>
    <body>
        <p>Ceci est le contenu de mon premier paragraphe, <br>dont le contenu est particulièrement long.</p>
        <p>Ceci est le contenu de mon deuxième paragraphe</p>
    </body>
</html>

Testez pour voir avec le CodePen P1C4a.

CodePen est une console en ligne, un genre de bac à sable de code : vous pouvez jouer avec et changer des choses pour voir ce que cela fait en direct. Ne vous inquiétez pas, vous ne modifiez pas la base de code du CodePen ; si vous voulez retrouver le code d'origine, il vous suffit de rafraichir la page.

Les bouts de code dans CodePen ne contiennent que le code qui irait dans la balise <body>. Ne soyez pas étonné s'il n'y a pas la balise <head> </head>  ni les autres éléments que nous avons pu voir.

Vous pouvez théoriquement mettre plusieurs balises  <br>  d'affilée pour faire plusieurs sauts de lignes, mais on considère que c'est une mauvaise pratique qui rend le code délicat à maintenir. Pour décaler un texte avec plus de précision, on utilisera le CSS, ce langage qui vient compléter le HTML pour lui ajouter du style, et dont je vous parlerai un peu plus loin.

Maintenant que vous savez créer des paragraphes et sauter des lignes, voyons comment créer des titres.

Créez des titres avec les balises  <h1>,  <h2>,  <h3>…

Les balises de titres vont de <h1> </h1> jusqu'à <h6> </h6>, ce qui permet de hiérarchiser et structurer le texte dans différentes sections, du niveau le plus grand, au niveau le plus petit.

Il faut toujours structurer sa page en commençant par un titre de niveau 1<h1>, puis structurer l'intérieur avec des titres de niveau 2<h2>, puis, si besoin de structurer l'intérieur, utiliser des titres de niveau 3, etc. Il ne devrait pas y avoir de sous-titre sans titre principal !

Ne confondez pas :

La balise <h1>  sert à créer un titre de niveau 1 qui sera affiché sur la page web.

La balise <title>n'affiche rien sur la page web, elle affiche le titre de la page dans l'onglet du navigateur.

Ajoutons donc des balises de titre dans le code :

<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="UTF-8">
        <title>Ma page</title>
    </head>
    <body>
        <h1>Bienvenue sur ma page</h1>
        <p>Ceci est le contenu de mon premier paragraphe</p>
        <p>Ceci est le contenu de mon deuxième paragraphe</p>
        <h2>Voilà mon sous-titre 1</h2>
        <h3>Une sous-partie</h3>
        <p>Un paragraphe</p>
        <h3>Une autre sous-partie</h3>
        <p>Tiens encore un paragraphe</p>
        <h2>Voilà mon sous-titre 2</h2>
        …
    </body>
</html>

Votre navigateur affiche par défaut des tailles différentes de texte en fonction des titres, mais si vous voulez modifier la taille du texte, sachez que nous apprendrons à faire cela en CSS un peu plus tard.

Créez des listes avec les balises  <li>  et  <ul>  ou  <ol>

Étape 1 : balisez les éléments d'une liste avec <li> </li>
Pour baliser les éléments qu'on veut mettre dans une liste, on utilise <li> </li>  (pour "listed item" ou "élément de la liste" en français). Puis on les insère tous à l'intérieur d'une autre balise pour indiquer s'il s'agit d'une liste à puces ou d'une liste numérotée.

Étape 2 : insérez la liste dans des balises <ul> </ul> ou <ol> </ol>
Les balises <ul> </ul>(pour "unordered list") permettent d'indiquer qu'on démarre une liste non ordonnée, c'est-à-dire, ce que l'on appelle en français une liste à puces.

Les balises <ol> </ol>(pour "ordered list") permettent d'indiquer qu'on démarre une liste ordonnée, autrement dit en français une liste numérotée.

Comme c'est particulièrement intuitif, je vous laisse admirer la simplicité de cet exemple :

<h1>Les fruits rouges</h1>
<ul>
   <li>Fraises</li>
   <li>Framboises</li>
   <li>Groseilles</li>
</ul>

<h1>Ma journée</h1>
<ol>
   <li>Je me lève.</li>
   <li>Je mange et je bois de l'eau.</li>
   <li>Je retourne me coucher.</li>
</ol>

Mettez en valeur du texte important
Dans le texte qui s'affiche sur une page web, vous aimeriez faire ressortir certains mots en particulier.

La balise la plus utilisée pour cela est <strong> mais HTML vous propose différents moyens de mettre en valeur le texte de votre page :

Balises

Traduction par le navigateur

<mark> </mark> => Surligner le texte.

<em> </em> => Mettre le texte en italique.

<strong> </strong> => Mettre le texte en gras.

Testez pour voir avec le CodePen P1C4b !

Ok ! Mais cette mise en forme ne me plaît pas trop, on peut la changer ?

En fait, c'est le navigateur qui choisit comment afficher les mots qu'on lui indique comme étant plus ou moins importants (en gras, en italique,…). Les balises <em> et <strong>  ne signifient pas respectivement “mettre en italique" ou "mettre en gras” mais seulement que le texte est “important”. On pourra décider plus tard, en CSS, d'afficher les mots “importants” d'une autre façon que le gras, si on le souhaite.

Soit, et si je n'ai pas envie de faire ressortir du texte important, c'est grave ?

Les robots de moteurs de recherche parcourent le Web en lisant le code HTML de tous les sites. Les mots-clés “importants”, mais aussi les titres (headings) hiérarchisés auront tendance à avoir plus de valeur à leurs yeux ; donc si quelqu'un fait une recherche sur ces mots, il a plus de chances de tomber sur votre site (votre site aura un meilleur référencement). Mais attention tout de même : abuser de ces balises n’aura pas l’effet escompté sur votre référencement.

Une nuance tout de même : abuser de ces balises n’aura pas l’effet escompté sur votre référencement. Si quasiment tout le texte est signalé comme étant important, rien en particulier ne va vraiment pouvoir "ressortir"… Pensez-y !

À vous de jouer

La photographe Robbie Lens nous a demandé de lui faire un site web pour mettre en avant son travail. Mais il va lui falloir également une page pour se présenter. Pour l'occasion, nous avons donc ajouté du contenu dans le fichier  index.html  et créé une nouvelle page :a-propos.html

Vous trouverez la base de code pour réaliser l'exercice sur la branche GitHub P1C4-exercice .

Téléchargez les fichiers pour les ouvrir dans Visual Studio Code et réaliser l'exercice. Vous allez :

créer le titre dans la page a-propos.html: "À propos de Robbie Lens" ;

créer le paragraphe associé : "Photographe depuis plus de 5 ans, je réalise des reportages aux photos dynamiques et pertinentes pour vos projets de communication. Créativité, qualité, et sérénité pour vous ! Je gère tout, depuis la direction artistique, la réalisation du reportage, jusqu’à la livraison de vos photos retouchées, prêtes à l’emploi." ;

créer un titre de niveau 2 pour ajouter une section nommée : "Services" ;

créer une liste non ordonnée pour lister les spécialités de Robbie Lens :

Portrait seul ou à plusieurs,

Shooting mode,

Retouches sur mesure,

Développement. 

À tout moment, vous pouvez faire un double-clic sur vos fichiers .html pour les ouvrir dans votre navigateur et voir le résultat. Pensez à les enregistrer régulièrement cela dit.

Un problème ? Par ici pour découvrir la solution sur la branche GitHub P1C4-solution.

En résumé
Le HTML comporte de nombreuses balises qui nous permettent d'organiser le texte de notre page. Ces balises donnent des indications comme “Ceci est un paragraphe”, “Ceci est un titre”, etc.

Les paragraphes sont définis par la balise  <p> </p>  , et les sauts de ligne par la balise orpheline   <br>.

Il existe six niveaux de titre, de  <h1> </h1>  à  <h6> </h6>, à utiliser selon l'importance du titre.

On peut mettre en valeur certains mots avec les balises  <strong>,  <em>  et  <mark>.

Pour créer des listes, on doit utiliser la balise  <ul>  (liste à puces, non ordonnée) ou  <ol>  (liste ordonnée). À l'intérieur, on insère les éléments avec une balise  <li>  pour chaque item.

Vous avez maintenant un peu plus d'éléments dans vos pages HTML, bravo à vous. C'est maintenant le moment de commencer à interagir au sein de votre projet avec les liens. Ça tombe bien : c'est ce qu'on voit dès maintenant dans le chapitre suivant !

#################################################################################################################

Créez un lien hypertexte en HTML

On reconnaît facilement un lien hypertexte (ou hyperlien) sur une page web : par défaut, il est en bleu et souligné dans le navigateur et un curseur en forme de main apparaît lorsqu'on pointe dessus ; mais on peut modifier ce style en CSS.

Créez un lien hypertexte avec la balise <a> et l'attribut href

Pour faire un lien hypertexte :

on utilise la balise<a>(pour "anchor") pour indiquer qu'on va rediriger vers un autre endroit,

puis, on ajoute l'attribut href suivi de = pour annoncer l'endroit vers lequel on veut rediriger,

on indique explicitement entre  " "  l'endroit vers lequel le lien doit rediriger,

enfin, on écrit le texte qui doit s'afficher sur l'hyperlien.

À partir de là, il y a des subtilités selon l'endroit où l'on veut rediriger l'utilisateur.

Créez un lien hypertexte vers l'URL d'une page disponible sur internet
Si vous voulez faire un lien vers un autre site existant en ligne, rien de plus simple, il suffit d'utiliser la méthode de copier l'URL du site entre " "à la suite de l'attribut, comme ceci :

<a href="https://openclassrooms.com/fr/">Accédez à OpenClassrooms</a>

Ce type de lien hypertexte s'appelle un lien absolu : il indique une adresse complète.

Nous allons maintenant voir que l'on peut écrire les liens d'une façon un peu différente, ce qui va nous être utile pour faire des liens entre les pages de notre site.

Créez un lien hypertexte d'une page à une autre sur votre site
Souvenez-vous : pour l’instant nous n’avons pas d’URL disponible car le site n’est pas encore en ligne. On va donc créer des liens entre nos pages en utilisant leur nom, et en indiquant leur arborescence dans notre dossier en local.

Ce type de lien hypertexte s'appelle un lien relatif : il indique où trouver notre fichier HTML.

Cas n°1 : les deux pages sont situées dans un même dossier en local
Si les pages sont dans le même dossier, il suffit d'écrire comme cible du lien hypertexte le nom du fichier vers lequel on veut amener, par exemple le fichier nommé page2.html.

Si on veut aller de la page 1 à la page 2, voici ce que nous écrirons dans le fichier de page1.html

<a href="page2.html">Page 2</a>

Mais comment faire si on veut créer un fichier page 3 et le déplacer dans un dossier `/contenu` : comment indiquer le chemin relatif ?

Justement, la réponse est dans la question : en indiquant le chemin !

Cas n°2 : les deux pages sont situées dans deux dossiers différents en local
Si on veut créer un fichier page 3 et le déplacer dans un autre dossier, par exemple un dossier  /contenu , on va donc indiquer le chemin à suivre pour trouver ce fichier :

<a href="contenu/page3.html">Page 3</a>
Et s'il y a plusieurs sous-dossiers, on écrira ceci :

<a href="contenu/autredossier/page3.html">Page 3</a>

Et si le fichier ne se trouve pas dans un sous-dossier, mais dans un dossier “parent”, on fait comment ?

Si votre fichier cible est placé dans un dossier qui se trouve “plus haut” dans l'arborescence, il faut écrire deux points  ..  , comme ceci :

<a href="../page3.html">Page 3</a>

Créez une ancre avec les attributs  id  et  href

Une ancre est un repère que l'on peut mettre dans une page HTML si elle est très longue, cela aide à la navigation et rend un contenu plus facile à parcourir. Cela permet par exemple aux visiteurs d'un site web d'aller directement à la partie qui les intéresse.

Ce comportement est typique d'un site web "one page" où tout se situe sur la même page. 

Pour créer une ancre, il suffit de rajouter l'attribut  id  à une balise qui va alors servir de repère. Ce peut être n'importe quelle balise, une balise de titre par exemple. Voyons comment faire :

La première étape consiste à ajouter l'attribut  id suivi de =  pour donner un nom à l'ancre entre  " " :

<h2 id="mon_ancre">Titre</h2>
L'attribut  id  sert à donner un nom “unique” à une balise, pour s'en servir de repère. Et, croyez-moi, vous n'avez pas fini d'entendre parler de cet attribut. Ici, on s'en sert pour faire un lien vers une ancre mais, en CSS, il pourra nous être utile pour repérer une balise précise, vous verrez.

Évitez de créer des  id  avec des espaces ou des caractères spéciaux ; utilisez simplement, dans la mesure du possible, des lettres et des chiffres pour que la valeur soit reconnue par tous les navigateurs.

La seconde étape consiste à indiquer où se situe l'ancre. La méthode pour se faire varie selon que :

l'ancre est plus bas sur la même page

l'ancre est située sur une autre page

Cas n°1 : l'ancre est plus bas sur la même page
Dans ce premier cas, on crée un lien avec l'attribut href  (il contient un dièse #  suivi du nom de l'ancre) :

<a href="#mon_ancre">Aller vers l'ancre</a>

Voici un exemple de page comportant beaucoup de texte et utilisant les ancres :

<h1>Ma grande page</h1>
<p>
Découvrez nos conseils d’aménagement pour :<br>
    <a href="#cuisine">La cuisine</a><br>
    <a href="#jardin">Le jardin</a><br>
    <a href="#salon">Le salon</a><br>
</p>
<h2 id="cuisine">La cuisine</h2>
<p>... (beaucoup de texte) ...</p>
<h2 id="jardin">Le jardin</h2>
<p>... (beaucoup de texte) ...</p>
<h2 id="salon">Le salon</h2>
<p>... (beaucoup de texte) ...</p>
Testez pour voir avec le CodePen P1C5

Vous avez peut-être remarqué que l’on a commencé à utiliser du latin pour remplir des zones de texte dans notre code. C'est normal, pas de panique ! Il s'agit du "lorem ipsum", un “faux texte” qu'on peut ajouter provisoirement, de manière à calibrer une mise en page avant la validation d’un texte définitif.

Cas n°2 : l'ancre est située dans une autre page
Dans ce cas-là, on tape le nom de la page cible avant le dièse # et enfin le nom de l'ancre :

<a href="index.html#jardin">Le jardin</a>
Voici une nouvelle page qui contient trois liens, chacun amenant vers une des ancres de la page de l'exemple précédent :

<h1>Le Mégamix</h1>
<p>
Rendez-vous quelque part sur la page :<br>
    <a href="index.html#cuisine">La cuisine</a><br>
    <a href="index.html#jardin">Le jardin</a><br>
    <a href="index.html#salon">Le salon</a><br>
</p>

Et voilà pour tout ce que vous devez savoir sur les liens !

Sachez qu'il est possible de configurer un lien pour qu'il ait un comportement un peu particulier.

target="_blank"  fait en sorte que le lien hypertexte ouvre un nouvel onglet :

<p>Bonjour. Souhaitez-vous apprendre sur <a href="https://openclassrooms.com" target="_blank">OpenClassrooms</a> ?</p>

href="mailto:NOMDUMAIL@MAIL.COM"  crée un lien hypertexte qui ouvre la boîte mail avec un nouveau message vide.

href="NOMDEFICHIER.EXTENSION"  crée un lien hypertexte qui permet de télécharger un fichier que vous avez placé au préalable dans le même dossier que votre page web.

À vous de jouer

Vous allez maintenant pouvoir mettre en pratique ce que vous venez d'apprendre sur les liens. Exceptionnellement pour cet exercice, la page  a-propos.html  a été déplacée dans un dossier  dossier-demo  afin que vous puissiez tester votre compréhension des liens relatifs.

Pour cet exercice, votre mission, si vous l'acceptez, est de :

créer sur la page d'accueil un lien vers la page "À propos" (sans déplacer les fichiers) ;

créer sur la page  a-propos.html  un lien vers la page d'accueil (sans déplacer les fichiers) ;

ajouter les liens vers les réseaux sociaux (qui s'ouvrent dans un nouvel onglet) sur la page d'accueil et la page "À propos" :

pour Twitter, vous redirigerez vers "https://twitter.com/",

pour Instagram, le lien pointe vers "https://www.instagram.com/".

En résumé
Un lien hypertexte (ou hyperlien) permet de changer de page. Par défaut, il est en bleu et souligné dans le navigateur mais on peut modifier ce style en CSS.

Pour faire un lien hypertexte vers un site web existant, on utilise la balise  <a>  avec l'attribut  href pour indiquer l'adresse de la page web cible. Il s'agit d'un lien absolu. Exemple :  <a href="https://openclassrooms.com"> .

Pour faire un lien hypertexte vers une autre page de son site, on utilise la balise <a>  avec l'attribut  href pour indiquer le nom du fichier en local. Il s'agit d'un lien relatif. Exemple :  <a href="page2.html"> .

Un lien hypertexte peut aussi permettre d'amener vers un endroit précis d'une page. Il faut créer une ancre avec l'attribut  id  pour “marquer” cet endroit dans la page, puis faire un lien vers l'ancre comme ceci :  <a href="#ancre"> .

On se retrouve tout de suite pour le dernier chapitre de la partie, qui vous permettra d'insérer de magnifiques images dans vos pages web !

#################################################################################################################

Insérez des images

Insérez une image avec la balise orpheline  <img>

La balise qui permet d'insérer une image est une balise orpheline :  <img> 

Pour fonctionner correctement, la balise  <img>  doit être accompagnée de deux attributs :

src  : cet attribut permet d'indiquer la source de l'image.

alt  : cet attribut permet de donner à l'image une description alternative.

Ajoutez l'attribut  src  pour indiquer la source de l'image
La source de l'image est précisée avec l'attribut  src pour indiquer au navigateur comment récupérer l'image que l'on veut insérer. De la même manière qu'un lien hypertexte, on peut indiquer la source d'une image :

…avec un chemin absolu si l'image vient d'internet
On utilise un chemin absolu pour indiquer la source d'une image lorsque celle-ci est en ligne, sur un site, ou qu'elle est hébergée sur le web. On copie colle donc simplement l'URL de l'image.

Regardez ce que ça donne dans le CodePen P1C6.

Lorsque vous utilisez cette technique, faites attention à ce que l'URL corresponde bien à l'image uniquement, et pas à une page web qui contient une image. Pour vous en assurer, vous pouvez faire un clic droit sur l'image de votre choix, et choisir "Copier l'adresse de l'image".

…ou avec un chemin relatif si l'image est en local sur votre ordinateur
C'est ce que l'on fait si l'image est sur notre ordinateur : on utilise alors le nom et l'arborescence du fichier de l'image en local pour indiquer sa source.

Si l'image est dans un sous-dossier nommé images, on précise :  src="images/logo.png" 

Évitez à tout prix les accents, majuscules et espaces dans vos noms de fichiers et de dossiers. Par exemple, voici un chemin qui va poser problème : Images du site/Image toute bête.jpg 

Il faut idéalement :

supprimer les espaces (ou les remplacer par le symbole_) et les accents ;

tout mettre en minuscules, comme ceci :images_du_site/image_toute_bete.jpg.

Si votre image ne s'affiche pas, c'est très certainement parce que le chemin est incorrect ! Simplifiez au maximum vos noms de fichiers et de dossiers, et tout ira bien.

Voici un exemple d'insertion d'image :

<p>
Voici une très belle photo que j'ai trouvée sur Unsplash :<br>
<img src="images/paysage.jpg" alt="Photo de plage vue du dessus" />
</p>

 Ah tiens c'est quoi ce  alt  là ?

Voilà qui nous fait une belle transition vers la suite de ce chapitre !

Ajoutez l'attribut alt  pour donner à l'image une description alternative
Donner une decription alternative à une image est une bonne pratique !

C'est-à-dire ? Je ne comprends pas ce que c'est une description alternative.

Une description alternative est un court texte qui décrit ce que contient l'image. Ce texte alternatif sera :

inscrit à la place de l'image si elle ne peut pas être affichée au moment du chargement de la page web (cela arrive) ;

audio-décrit par les navigateurs de personnes présentant un handicap (trouble de la vue, non-voyants).

Cela contribue donc à améliorer ce que l'on appelle l'accessibilité d'un site web. En plus, cela aide les robots des moteurs de recherche pour trouver des images.

D'ailleurs, j'en profite pour faire une petite parenthèse sur les formats d'image !

Choisissez le bon format d'image

Voici quel format adopter en fonction de l'image que vous avez :

Une photo : utilisez un JPEG.

N'importe quelle image avec peu de couleurs (moins de 256) : utilisez un PNG 8 bits, ou éventuellement un GIF.

N'importe quelle image avec beaucoup de couleurs : utilisez un PNG 24 bits.

Une image animée : utilisez un GIF animé.

Un logo vectoriel : utilisez un SVG (vous pouvez en apprendre davantage sur le SVG dans le cours "Codez un site web accessible avec HTML et CSS").

Prenez l'habitude d'enregistrer vos fichiers avec des noms en minuscules, sans espace ni accent. C’est une bonne pratique à mettre en place dès le début. Vous pouvez remplacer les espaces par le caractère underscore _. Par exemple : mon_image.png 

Ajoutez une infobulle avec l'attribut  title

Afin d'afficher une bulle d'aide sur vos images, vous pouvez utiliser l'attribut  title ; (à ne pas confondre avec la balise title qui permet d'indiquer au navigateur le titre d'une page web).

L'attribut title est facultatif, contrairement à alt.

Voici ce que cela peut donner :

<img src="montagnes.png" title="Alors, envie de vous balader n'est-ce pas ?" alt="Chemin de randonnée au milieu des montagnes">

Le visiteur du site, n'aura qu'à survoler la photo avec la souris pour voir l'infobulle "Alors, envie de vous balader n'est-ce pas ?" apparaître par dessus l'image.

Créez une miniature cliquable

Si votre image est très grosse, il est conseillé d'en afficher la miniature cliquable sur votre site. De cette manière vos pages web mettront moins de temps à s'afficher. Si vos visiteurs souhaitent voir vos images en taille originale, ils n'auront qu'à cliquer dessus.

Pour ce faire, il faut disposer de deux versions d’une photo : l'image d'origine, et une version de cette image moins lourde (donc plus petite).

Voyons voir comment faire en sorte que la miniature soit cliquable :

placez vos deux images dans un dossier appelé par exemple images  .

Faites afficher la version montagne_mini.jpg  sur une page,

et faites un lien vers la version montagne.jpg.

L'image agrandie s'affiche alors lorsqu'on clique sur la miniature.

Voici le code HTML qu’on peut utiliser pour cela :

<p>Vous souhaitez voir l'image dans sa taille d'origine ? Cliquez dessus !<br>
    <a href="images/montagne.jpg"><img src="images/montagne_mini.jpg" alt="Chemin de randonnée au milieu des montagnes" title="Cliquez pour agrandir" ></a>
</p>

Parfois, certains navigateurs choisissent d'afficher un cadre bleu (ou violet) pas très esthétique autour de votre image cliquable. Nous pourrons retirer ce cadre dans peu de temps grâce au CSS.

À vous de jouer

Vous allez maintenant pouvoir enrichir le portfolio de Robbie Lens. Pour cela, vous devrez :

remplacer les liens Twitter et Instagram en bas des pages "À propos" et "Accueil" par les icônes correspondantes ;

insérer l'image de Robbie Lens sur la page d'accueil (le fichier s'appelle  robbie-lens.png  ) ;

afficher tout en haut et tout en bas de la page le logo qui renvoie sur la page d'accueil grâce à un lien.

Vous trouverez toutes les images nécessaires pour cet exercice directement dans la base de code, dans le dossier  /images  .

Comme pour les chapitres précédents, vous trouverez la base de code pour démarrer l'exercice sur la branche P1C6-exercice, et la solution sur la branche P1C6-solution par ici !

En résumé

Il existe plusieurs formats d'images adaptés au Web : PNG, JPG…

On insère une image avec la balise <img>  .

<img> doit obligatoirement comporter au moins ces deux attributs : src (source de l'image) et   alt (courte description de l'image).

Il est possible d'afficher une autre version d'une image grâce à un lien qui entoure l’image.

Et voilà, vous avez maintenant terminé la première partie de ce cours : un grand bravo à vous ! Vous avez hâte de vous attaquer au CSS ? J’en suis sûr ! Mais avant de plonger dans le monde merveilleux de la mise en forme, passez le quiz !

#################################################################################################################

!!!!!!!!!!!!!!!! Maîtriser les bases de HTML5 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Question 1

Parmi ces extraits de code, lequel comporte une syntaxe valide pour créer un paragraphe de texte ?


- <paragraph>Ceci est mon texte</paragraph>

- <p>Ceci est mon texte</p> (o) (B)

- <p value="Ceci est mon texte">

- <body>Ceci est mon texte</body>

""""""""""" Réponse """""""""""""
Pour écrire un paragraphe de texte en HTML, il faut :

Utiliser la balise ouvrante  <p>  et la balise fermante  </p>  .
Écrire son texte entre les balises.
Les balises  <paragraph> </paragraph>  ne correspondent pas à un vrai élément HTML.

La balise orpheline de la réponse 3 n'est pas non plus une syntaxe connue.

Enfin, même si dans les faits il est possible d'écrire directement du texte à l'intérieur de  <body> </body>, la réponse 4 ne correspond pas à l'énoncé.

Il fallait donc choisir la réponse 2 :  <p> </p> 

"""""""""""""""""""""""""""""""""

Question 2

Vous avez une page  index.html  qui veut afficher l'image  perroquet.png. Cette image se situe dans le dossier /images.

Quel snippet de code permet d'afficher la photo ?


- <image src="images/perroquet.png" alt="Un perroquet mange une amande">

- <img>"perroquet.png"</img>

- <img src="perroquet.png" alt="Un perroquet mange une amande"> (o) (M)

-  <img src="images/perroquet.png" alt="Un perroquet mange une amande"> (B)

""""""""""" Réponse """""""""""""
Pour afficher une image en HTML, il faut :

Utiliser la balise orpheline  <img>  avec l'attribut  src  pour lui indiquer le chemin de l'image à aller chercher.
Utiliser l’attribut  alt  pour garantir l'accessibilité de l'image.
Les syntaxes des réponses 1 et 2 ne sont pas correctes. Quant à la réponse 3, le chemin relatif indiqué ne correspond pas, puisque l'image  perroquet.png  se situe dans un dossier nommé  images.

Il fallait donc choisir la réponse 4.

"""""""""""""""""""""""""""""""""

Question 3

Vous trouverez du code HTML dans le CodePen Quiz P1Q3.

Dans ce bout de HTML, plusieurs erreurs ont été commises. Qu'est-ce qui ne va pas ? (Essayez de trouver les réponses par vous-même avant de voir les options proposées).

Attention, plusieurs réponses sont possibles.

- <h2>  est utilisé alors qu'il n'y a pas de  <h1> (o) (B)

- La source de l'image n'est pas précisée

- La balise <p> n'est pas fermée (o) (B)

- L'image ne possède pas d'attribut  alt (o) (B)

""""""""""" Réponse """""""""""""
Comme nous l'avons vu dans le cours, il doit exister une hiérarchie des titres : on ne doit pas avoir de balise  <h2>  avant même d'avoir une balise  <h1>  .

Par ailleurs, deux balises  <p>  sont ouvertes, mais ne sont pas fermées avec  </p>.

Enfin, la balise  img  n'a pas l'attribut  alt  , qui est pourtant indispensable.

Il fallait donc choisir les réponses 1, 3 et 4.

"""""""""""""""""""""""""""""""""

Question 4

Une valeur et un attribut permettent, ensemble, d'ouvrir un lien dans un nouvel onglet. Lesquels ?

Attention, plusieurs réponses sont possibles.

- L'attribut  target (o) (B)

- La valeur  _blank (o) (B)

- L’attribut  title

- La valeur  mailto:

- La valeur  blank

""""""""""" Réponse """""""""""""
Pour ouvrir un lien dans un nouvel onglet, la syntaxe est la suivante :

<a href="https://lien.com" target="_blank">Mon lien</a>
Il fallait donc choisir les options 1 et 2.

"""""""""""""""""""""""""""""""""

Question 5

Parmi ces affirmations à propos des commentaires HTML, lesquelles sont correctes ?

Attention, plusieurs réponses sont possibles.

- En HTML, on ouvre un commentaire avec  <!-- (o) (B)

- En HTML , on ferme un commentaire avec  //

- Les commentaires ne sont pas visibles dans le code source d'une page HTML

- Il existe des raccourcis clavier selon l'éditeur de code pour commenter du code rapidement (o) (B)

""""""""""" Réponse """""""""""""
Pour écrire un commentaire en HTML, on écrit :  <!-- Ceci est mon commentaire →.

On peut l'écrire à la main, ou bien utiliser les raccourcis clavier sur Visual Studio Code : cmd + / ou ctrl+ /

Il fallait donc choisir les réponses 1 et 4.

"""""""""""""""""""""""""""""""""

Question 6

Quel bout de code permet d'obtenir le résultat de l'image ci-dessous ?

- <a href="http://lien.com" title="Ceci est un lien">Cliquez pour voir</a>

- <a href="http://lien.com" title="Cliquez pour voir">Ceci est un lien</a> (o) (B)

- <a href="http://lien.com" bulle="Cliquez pour voir">Ceci est un lien</a>

""""""""""" Réponse """""""""""""
C'est l'attribut  title  dans un lien qui permet de créer une infobulle comme dans l'exemple de l'image. Sauf que pour la réponse 1,  title  contient le texte qui devrait se trouver dans la balise du lien. Le texte de la balise du lien et celui de l'infobulle sont inversés. Pour ce qui est de la réponse 3, elle utilise un faux attribut :  bulle. Il fallait donc choisir la réponse 2.

"""""""""""""""""""""""""""""""""

Question 7

Quel bout de code correspond à l'affichage de l'image juste en dessous ?

=> <ul>
       <li> ...</li> (B)
   </ul>

""""""""""" Réponse """""""""""""
Ici, il s'agit d'une liste non ordonnée. Pour la créer, on utilise la balise  <ul>  (pour unordered list), dans laquelle on vient mettre des éléments avec  <li>  (pour list item ou "élément de la liste" en français).

La réponse 2 est ordonnée (avec des nombres qui augmentent pour chaque élément). Quant à la réponse 3, elle inverse  <ul>  et  <li> . Il fallait donc choisir la réponse 1.

"""""""""""""""""""""""""""""""""

Question 8

Vous avez une base de code, dans laquelle les fichiers sont organisés de la manière suivante :

Voici à quoi ressemble votre fichier  page2.html  :

<!DOCTYPE html>
<html>
  <head>
     <meta charset="utf-8">
     <title>Page 2</title>
  </head>
  <body>
    <h1>Bienvenue sur la page 2 🌈</h1>
    <a href="../index.html">Accueil</a>
    <!-- Insérer ici un lien vers la page 1 -->
  </body>
</html>

Quel morceau de code permet de créer un lien vers la page 1 à la place du commentaire  Insérer ici un lien vers la page 1  ?

- <a href="../page1.html">Page 1</a>

- <a href="../dossier1/page1.html">Page 1</a> (o) (B)

- <a href="./page1.html">Page 1</a>

- <a href="page1.html">Page 1</a>

""""""""""" Réponse """""""""""""
On utilise ici des chemins relatifs pour indiquer où trouver notre page dans notre code HTML.

On a :

un fichier  index.html  qui se situe à la racine du projet,
un dossier  dossier1  qui contient un fichier  page1.html,
et un dossier  dossier2  qui contient le fichier  page2.html.
Pour retourner un niveau en arrière, on utilise  ../  et pour entrer dans un dossier, il faut indiquer le nom du dossier suivi d'un  /.

Il fallait donc choisir la réponse 2.

"""""""""""""""""""""""""""""""""

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

############################################################################################################