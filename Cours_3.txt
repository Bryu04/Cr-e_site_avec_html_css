Structurez votre page

Utilisez la balise  <header> pour l'en-tête

La plupart des sites web possèdent un <header>(en-tête, en français). On y trouve le plus souvent, à minima, un logo. On le place, pour des raisons de cohérence, en tête du code, donc au début de la balise   <body>  :

<header>
<!-- Placez ici le contenu de l'en-tête de votre page -->
</header>

L'en-tête peut contenir tout ce que vous voulez : une image pour un logo, liens, du texte pour le slogan de votre marque par exemple, un bouton d'appel à l'action… Généralement, on préfère que cela reste clair et lisible donc on évite de surcharger le  <header>  avec trop d'éléments.

Voici par exemple l’en-tête du site de La Fourche :

Attention, la balise <header>  n'a rien  à voir avec la balise  <head>  que vous aviez vue dans la première partie :

  - la balise <header>  permet de créer une partie de la page HTML ;

  - la balise  <head>  permet d'inclure des informations générales sur la page, notamment son titre, des liens 
    vers des polices, vers une feuille de style, etc.

Il peut y avoir plusieurs en-têtes dans votre page. Si celle-ci est découpée en plusieurs sections, chaque section peut en effet avoir son propre  <header>  .

Utilisez la balise  <footer>  pour le pied de page

À l'inverse de l'en-tête, le pied de page se trouve tout en bas de la page. On y trouve généralement des informations comme des liens de contact, les mentions légales, la politique de confidentialité, etc.

<footer>
<!-- Placez ici le contenu du pied de page -->
</footer>
Voici le pied de page de la page d’accueil du site de La Fourche :

Utilisez la balise  <nav> pour le menu de navigation

La balise <nav>  doit regrouper tous les principaux liens de navigation du site. Vous y placerez par exemple le menu principal de votre site. Généralement, le menu est réalisé sous forme de liste à l'intérieur de la balise<nav> .

Voici le menu sur le site de La Fourche :

Ici on pourrait avoir, de façon simplifiée :

<nav>
    <ul>
        <li>
            <a href="#">Nouveautés</a>
        </li>
        <li>
            <a href="#">Anti-gaspi</a>
        </li>
        <li>
            <a href="#">Origine France</a>
        </li>
        <li>
            <a href="#">Marque La Fourche</a>
        </li>
    </ul>
</nav>

Utilisez la balise  <main>  pour le contenu principal de la page

La balise <main> permet de déclarer le contenu principal de votre page. Elle englobe la majeure partie du  <body>  d'une page, en excluant les autres éléments tels que le  <header>, le  <footer>  et de potentiels  <aside>. La balise <main> doit être unique : il n'y en a qu'une seule par page :

<main>
</main>

Utilisez des balises  <section>  pour structurer le contenu du  <main>

La balise <section>  sert à regrouper des contenus en fonction de leur thématique. Elle englobe généralement une portion du contenu au centre de la page.

<section>
</section>

Sur la page d'accueil du site de La Fourche, on trouve plusieurs blocs qui pourraient être considérés comme des sections de page :

Utilisez une balise  <aside>  pour des contenus additionnels dans le  main
Il existe d'autres balises pour structurer une page, comme <aside> par exemple, qui permet de contenir des informations complémentaires au document que l'on visualise. Ces informations sont généralement placées sur le côté (bien que ce ne soit pas une obligation). Il peut y avoir plusieurs blocs <aside>  dans la page. Sur Wikipédia, par exemple, il est courant de voir à droite un bloc d'informations complémentaires à l'article que l'on visualise.

À noter : la balise <article>  sert à englober une portion généralement autonome de la page. C'est une partie de la page qui pourrait ainsi être reprise sur un autre site. C'est le cas par exemple des actualités (articles de journaux ou de blogs).

Ne vous y trompez pas : ce schéma propose un exemple d'organisation de la page. Rien ne vous empêche de décider que votre menu de navigation soit à droite, ou tout en haut, que vos balises  <aside>  soient au-dessus, etc.

Essayez d'utiliser toutes les balises que nous venons de découvrir avec le CodePen P3C1.

Ce code peut vous aider à comprendre comment les balises doivent être agencées. Vous y reconnaissez un en-tête, un menu de navigation, un pied de page… et, au centre, deux sections incluses dans  <main>  .

Eh mais… la page ne ressemble à rien, c'est normal ?

Pour l'instant, vous avez juste du texte noir sur fond blanc. C'est normal, il n'y a pas de CSS ! Par contre, la page est bien structurée, ce qui va nous être utile pour la suite. Vous pouvez d'ailleurs totalement appliquer le style souhaité à ces balises, comme vous le feriez pour toutes les balises que vous avez utilisées jusqu'à maintenant.

Je ne comprends pas l'intérêt de ces balises. On peut obtenir le même résultat sans les utiliser, non ?

C'est vrai. En fait, ces balises sont seulement là pour expliquer à l'ordinateur :

“Ceci est l'en-tête”.

“Ceci est mon pied de page”, etc.

Mais qui dit que l'ordinateur comprend veut aussi dire que le contenu sera également plus lisible par des outils d'assistance dans le cadre de l'accessibilité.

Elles n'indiquent pas, contrairement à ce qu'on pourrait penser, où doit être placé le contenu. C'est le rôle du CSS, comme nous le verrons dans peu de temps maintenant.

À l'intérieur de ces balises structurantes, comme vous l'avez sûrement vu dans le bout de code embarqué, vous pouvez également utiliser des balises universelles  <div>  et  <span>  afin de créer des blocs au sein de votre contenu, qui vous permettront ensuite de leur appliquer du style.

À vous de jouer !

C'est le moment de mettre en pratique ce que vous venez d'apprendre dans le portfolio de Robbie Lens. Pour cela, vous allez :

- intégrer un  <header>  dans les pages d'accueil et Á propos ;

- intégrer un  <footer>  dans ces même pages ;

- ajouter  <main>  là où c'est nécessaire ;

- basculer vos liens hypertextes de navigation dans une balise  <nav>  ;

- adapter les déclarations CSS en fonction des modifications faites. 

Comme d'habitude, vous avez accès sur GitHub à la base de code pour faire l’exercice sur la branche P3C1-exercice.

Vous avez trouvé cela difficile ? En cas de doute, consultez la solution sur la branche P3C1-solution.

En résumé

- Plusieurs balises permettent de délimiter les différentes zones qui constituent la page web :

   - <header>  : en-tête ;

   - <footer>  : pied de page ;

   - <nav>  : liens principaux de navigation ;

   - <section>  : section de page ;

   - <aside>  : informations complémentaires ;

   - <article>  : article indépendant.

- Ces balises peuvent être imbriquées les unes dans les autres. Ainsi, une section peut avoir son propre 
  en-tête.

- Ces balises ne s'occupent pas de la mise en page. Elles servent seulement à indiquer à l'ordinateur la 
  fonction du texte qu'elles encadrent. On pourrait très bien placer l'en-tête en bas de la page, si on le 
  souhaitait.

Vous savez maintenant comment structurer correctement vos pages web ! Passons au prochain chapitre : vous allez découvrir le modèle des boîtes, il s'agit d'une autre façon de structurer une page web, mais cette fois à l'aide du CSS, on y va !

##############################################################################################################

Découvrez le modèle des boîtes

Différencier les balises de type  block  et de type  inline

En HTML, la plupart des balises peuvent se ranger dans l'une ou l'autre de ces deux catégories :

  - block: ce type de balise crée automatiquement un retour à la ligne avant et après ; 

  - inline: ce type se trouve obligatoirement à l'intérieur d'une balise  block  . 

Il existe en fait plusieurs autres catégories très spécifiques, par exemple pour les cellules de tableau (type  table-cell  ) ou les puces (type  list-item  ). Nous n'allons pas nous y intéresser pour le moment, car ces balises sont minoritaires.

Pour bien visualiser le concept, voici un petit schéma :

Comme vous pouvez le voir, les blocs sont les uns en dessous des autres. On peut aussi les imbriquer les uns à l'intérieur des autres : souvenez-vous, un bloc  <main>  contient par exemple des blocs  <section>  , qui eux-mêmes peuvent contenir des  <div> .

Quant à la balise  <a></a>  (qui est de type  inline  ), elle se trouve à l'intérieur d'une balise  block  , et le texte vient s'insérer sur la même ligne.

Faites bon usage des balises universelles <span>  et  <div>

J'en profite pour vous parler à nouveau des balises universelles. Vous les connaissez déjà car je vous les ai présentées à plusieurs reprises. Ce sont des balises qui n'ont aucun sens particulier. Le principal intérêt de ces balises est que l'on peut leur appliquer une  class  (ou un  id  ) pour le CSS quand aucune autre balise ne convient.

Il existe deux balises génériques et, comme par hasard, la seule différence entre les deux est que l'une d'elles est  inline  et l'autre est  block  :

    1.La balise<span>(qui est de type inline).

    2.La balise<div>(qui est de type block).

N’abusez pas des balises universelles, même si elles sont utiles dans certains cas : beaucoup de développeurs mettent des  <div>  et des  <span>  trop souvent, et oublient que d'autres balises plus adaptées existent.

Par exemple :

  - <span class="important">  : ici, il ne s'agit pas d'une bonne pratique, alors qu'il existe les balises  
    <strong>   ou  <em>  qui servent à indiquer l'importance ! 

  - <div class="titre">  : idem, cela ne convient pas, puisqu'il existe des balises faites spécialement pour 
    les titres (  <h1>  ,  <h2>  …).

Le résultat visuel est le même, mais les balises génériques n'apportent aucun sens à la page, et ne peuvent pas être comprises par l'ordinateur. Utilisez toujours d'autres balises plus adaptées quand c'est possible.

Maintenant que vous comprenez la différence entre inline et block , nous allons apprendre à dimensionner des éléments en CSS ! Nous allons ici travailler uniquement sur des balises de type  block  .

Pour commencer, intéressons-nous à la taille des blocs.

Dimensionnez les éléments avec width et height

Contrairement à un  inline  , un  block  peut avoir une largeur et une hauteur précises grâce à ces deux propriétés CSS :

  1.width  (largeur du bloc).

  2.height  (hauteur du bloc).

On les exprime en pixels px ou en pourcentage %.

Par défaut, un bloc prend 100 % de la largeur disponible.

On peut le vérifier en appliquant à nos blocs des bordures ou une couleur de fond :

Maintenant, rajoutons un peu de CSS afin de modifier la largeur des paragraphes. Si on veut que tous les paragraphes aient une largeur de 50 %, on écrira en CSS :

p {  
    width: 50%;
}

Le résultat est visible juste en dessous :

Les pourcentages sont utiles pour créer un design qui s'adapte automatiquement à la résolution d'écran du visiteur.

Toutefois, il se peut que vous ayez besoin de créer des blocs ayant une dimension précise en pixels, par exemple pour reprendre un design très précis. Essayez le bout de code suivant pour voir :

p {
    width: 250px;
}

Les images sont un cas un peu particulier : elles se mettent les unes à la suite des autres, sans prendre toute la largeur, mais on peut malgré tout leur donner une dimension exacte.

Définissez des marges avec margin et padding

Tous les blocs possèdent des marges (intérieures et extérieures) :

En CSS, on peut modifier la taille des marges avec deux propriétés :

  1. margin  (taille de la marge extérieure)

  2. padding  (taille de la marge intérieure).

Pour bien comprendre la différence, faisons quelques tests.

Pour l'occasion, j'ai rédigé dans le fichier HTML des paragraphes de texte en lorem ipsum (du faux texte). Ensuite, dans le fichier CSS, j'ai donné au bloc  p  une largeur de  350px  et j'ai ajouté une couleur jaune avec la balise  background-color  pour qu'on visualise bien la différence entre les différentes marges :

p {
    width: 350px;
    background-color: #F1C864;
    text-align: justify;
}

Voilà ce qu'on obtient avec ce code :

Comme vous pouvez le constater, il n'y a par défaut pas de marge intérieure (padding  ) dans le bloc du paragraphe, (on le voit bien car il a un fond jaune et que les bordures sont collées au texte).

En revanche, il y a une marge extérieure (margin  ), on la voit bien car elle espace les paragraphe entre eux, avec une marge blanche (couleur du fond de la page par défaut). C'est cette marge qui fait que deux paragraphes ne sont pas collés, et qu'on a l'impression de “sauter une ligne”.

Ajoutez une marge intérieure avec la propriété CSS  padding
Pour ajouteraux paragraphes une marge intérieure (padding) de  16px  par exemple, on écrit :

p {
    width: 350px;
    background-color: #F1C864;
    text-align: justify;
    padding: 16px;
}

On obtient alors :

Ajoutez une marge extérieure avec la propriété CSS  margin
Maintenant, si on veut que nos paragraphes soient encore plus espacés entre eux, on rajoute la propriété margin  . Demandons par exemple  50px  de marge entre deux paragraphes :

p {
    width: 350px;
    background-color: #F1C864;
    text-align: justify;
    padding: 16px;
    margin: 50px;
}

On obtient :

Mais ??? Une marge s'est rajoutée tout autour aussi, pas seulement entre les deux paragraphes !?

Eh oui, margin  (comme padding  d'ailleurs) s'applique aux quatre côtés du bloc.

Si vous voulez spécifier des marges différentes en haut, en bas, à gauche et à droite, il va falloir utiliser des propriétés plus précises… Le principe est le même que pour la propriété  border, vous allez voir !

Spécifiez les propriétés margin et padding 

Vous allez avoir besoin d'un minimum de vocabulaire en anglais ici :

  - top: haut ;

  - bottom: bas ;

  - left: gauche ;

  - right: droite.

Voyez ce que cela donne dans le schéma ci-dessous :

Vous pouvez aussi utiliser seulement les propriétés raccourcies  margin  ou padding en précisant quatre valeurs à la suite, dans le sens des aiguilles d'une montre (haut, droite, bas, gauche).

Exemple :  margin: 2px 0 3px 1px;.

Ce qui signifie :

“ 2 pixels de marge en haut, 0 pixel de marge à droite (le  px  est facultatif dans ce cas), 3 pixels de marge en bas et 1 pixel de marge à gauche”.

Centrez vos blocs avec  width  et  margin: auto;

Pour centrer des blocs, il faut respecter les règles suivantes :

  1. donner une largeur au bloc avec la propriété width ;

  2. indiquer  margin: auto; (les marges extérieures seront alors automatiques, et permettront de centrer le 
     contenu.

Essayons cette technique sur nos paragraphes, en ajoutant simplement une ligne au CSS :

p {
    width: 350px;
    background-color: #F1C864;
    text-align: justify;
    padding: 16px;
    margin: auto;
}

Et on obtient :

Il n'est cependant pas possible de centrer verticalement un bloc avec cette technique. Seul le centrage horizontal est permis.

Je vous invite maintenant à tester ce que vous venez de découvrir avec le CodePen P3C2.

À vous de jouer !

Vous allez maintenant pouvoir vous faire la main sur le site de Robbie Lens, et mettre en pratique ce que vous venez d'apprendre ! Dans la branche de départ de l'exercice, vous trouverez un bout de CSS qui indique :

* {
    margin: 0;
}

Cela sert à réinitialiser les marges par défaut des navigateurs.

À partir de là, vous allez :

- ajouter un padding au  header  et au  footer  de  20px  en haut et en bas, et de  50px  à gauche et à 
  droite ;

- ajouter une section autour du contenu de la page d'accueil ;

- ajouter une section autour du contenu de la page  A-propos  ;

- donner à vos sections (pour les futures sections à venir) un padding de  80px  ;

- créer un padding de  50px  pour  carre-contenu  ;

- centrer le contenu de la page  A-propos  ;

- aérer le contenu de la page   A-propos  : mettre de la marge au-dessus du sous-titre "Services" et de la 
  liste des compétences. 

Vous trouverez sur GitHub la base de code nécessaire pour réaliser l’exercice sur la branche P3C2-exercice. Voici la solution sur la branche P3C2-solution pour vérifier si vous aviez vu juste.

En résumé
