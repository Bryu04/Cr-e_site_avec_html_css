Intégrez le CSS dans la page HTML

Allez c'est parti : nous allons intégrer le CSS à notre page HTML !

Liez le fichier CSS au fichier HTML

À partir du moment où vous créez un fichier .css pour appliquer du style à votre page web (écrite dans un fichier .html), il vous faut lier ces deux fichiers. Ainsi, les propriétés CSS que vous ajoutez vont pouvoir s'appliquer aux balises HTML auxquelles vous souhaitez qu'elles s'appliquent.

Pour lier les fichiers .css et .html, vous allez rajouter une ligne dans le fichier .html pour indiquer au navigateur d'aller chercher la feuille de style (stylesheet en anglais) afin d'afficher la page web avec les propriétés de style qu'on lui a appliquées.

Cette ligne à rajouter dans le fichier .html s'ouvre avec la balise orpheline <link> et on la place à l'intérieur de la balise <head> </head>

<head>
    <meta charset="utf-8">
    <title>Ma page</title>
    <link href="style.css" rel="stylesheet">
</head>

Lorsque vous cliquerez sur votre fichier HTML pour l'ouvrir dans le navigateur, ce dernier aura l'instruction d'appeler le fichier CSS associé pour afficher les propriétés de style de la page web.

Appliquez une propriété CSS à une balise HTML
Dans la vidéo d'introduction, nous avons utilisé cette syntaxe dans notre fichier CSS :

h1 {
    color: blue;
}
Dans un code CSS comme celui-ci, on trouve en fait trois éléments différents :

Le sélecteur : ici on écrit les noms des balises HTML dont on veut modifier l'apparence. Par exemple, si je veux modifier l'apparence de tous les paragraphes  <p>  , je dois écrire  p  (sans les chevrons).

La ou les propriétés CSS : les effets de style sont listés via des propriétés. Par exemple,  color  permet d'indiquer la couleur du texte,  font-size  permet d'indiquer la taille du texte, etc. Il existe BEAUCOUP de propriétés CSS ! Mais rassurez-vous, vous n’avez pas besoin de les connaître toutes par cœur.

…et leurs valeurs : pour chaque propriété CSS, on doit indiquer une valeur. Par exemple, pour la propriété  color  , il faut indiquer le nom de la couleur. Pour font-size, il faut indiquer quelle taille on veut, etc.

On écrit le nom de la balise. Puis entre accolades { } on écrit les propriétés et leurs valeurs. (On peut mettre autant de propriétés que l'on veut à l'intérieur des accolades).

Chaque propriété est suivie du symbole : puis de la valeur correspondante.

Chaque ligne se termine par ;.

Comment on fait des accolades sur le clavier français ?

Sur un PC, vous utilisez :

les touches alt gr  + 4 pour faire l'accolade ouvrante ;

et les touches alt gr  ++ pour faire l'accolade fermante ;

Sur mac, vous utilisez :

les touches option ⌥ + ( pour faire l'accolade ouvrante ;

et les touches option ⌥ + ) pour faire l'accolade fermante ;

Voici un exemple ! Pour changer la couleur des paragraphes, on écrirait :

p {
    color: blue;
}
Ce code signifie en français :

“Je veux que tous les paragraphes soient écrits en bleu."

Au fait on peut faire des commentaires en CSS, comme on en fait en HTML ? 

Oui ! Tapez /* suivi de votre commentaire, puis */ :

p {
/* J'en profite pour
ajouter un commentaire
sur plusieurs lignes */
    color: blue;
}

Appliquez une propriété CSS à plusieurs balises HTML à la fois


Ce code CSS signifie que nos titres de niveau 1 et nos paragraphes doivent s'afficher en bleu :

h1 {
    color: blue;
}

p {
    color: blue;
}
Ok mais c'est un peu répétitif, non ? On va devoir tout écrire à la main comme ça ?

Heureusement, non. Si les deux balises ont la même style, il suffit de combiner la déclaration en séparant les noms des balises par une virgule :

h1, p
{
    color: blue;
}
Et voilà ce que ça donne :

Ce que l’on vient de voir implique que TOUS les paragraphes seront écrits en bleu.

 Comment faire pour que certains paragraphes soient écrits d'une couleur différente ?

Pour appliquer un style à un seul élément (par exemple à un seul paragraphe parmi tous les paragraphes de notre code), on peut - en théorie - utiliser deux attributs :

l'attribut class ;

ou l'attribut id.

Mais pour ce faire - en pratique - on va surtout utiliser l'attribut class.

Ce que l’on vient de voir implique que TOUS les paragraphes seront écrits en bleu.

 Comment faire pour que certains paragraphes soient écrits d'une couleur différente ?

Pour appliquer un style à un seul élément (par exemple à un seul paragraphe parmi tous les paragraphes de notre code), on peut - en théorie - utiliser deux attributs :

l'attribut class ;

ou l'attribut id.

Mais pour ce faire - en pratique - on va surtout utiliser l'attribut class.

Les attributs class et id fonctionnent selon la même méthode mais on ne les utilise pas pour les mêmes raisons :

pour appliquer un style à un seul élément parmi d'autres, on utilise un attribut class.

pour appliquer un style à un élément unique en son genre, on utilise un attribut id. 

En CSS, on peut appliquer du style à un élément (ou plus) avec l'attribut class. Par contre id ne peut s'utiliser que pour un seul élément, pas plus.

Voyons comment appliquer la méthode dans un exemple dont l'usage est pertinent avec l'attribut class

Appliquez un style à un élément isolé avec l'attribut class 

Étape 1 : marquez un élément avec l'attribut  class dans le fichier .html 

class est un attribut que l'on peut mettre sur n'importe quelle balise HTML :

<h1 class="voici"> </h1>
<p class="des"> </p>
<img class="classes">

Oui, mais que met-on comme valeur à l'attribut class?

En fait, vous devez écrire un nom qui sert à identifier la balise. Ce que vous voulez, du moment que le nom commence par une lettre. Souvenez-vous qu'il s'agit d'un moyen de sélectionner votre élément pour ensuite lui appliquer du style.

Par exemple, je vais associer ma-classe à mon deuxième paragraphe dans le HTML :

<body>
    <h1>Titre principal</h1>
    <p>Ceci est le contenu de mon premier paragraphe</p>
    <p class="ma-classe">Ceci est le contenu de mon deuxième paragraphe</p>
    <h2>Voilà mon sous-titre h2</h2>
</body>

On vient de créer un attribut  class  nommé ma-classe dans le fichier .html pour marquer un élément auquel on veut appliquer un style en particulier. Maintenant, il faut appeler l'élément que l'on a marqué dans le fichier .css pour pouvoir lui appliquer un style.

Étape 2 : appelez le nom de l'attribut  class  via un . dans le fichier .css 
Pour faire cela, on va indiquer dans le fichier .css le nom de notre classe précédée d'un point . :

.ma-classe {
    color: #663399;
}

D'ailleurs, on en profite pour utiliser la notation hexadécimale pour indiquer la couleur, ce qui nous permet d'être plus précis (pas de panique, on verra cela plus en détail dans le prochain chapitre).

Testez le résultat : seul votre paragraphe appelé ma-classe va prendre la couleur qu'on lui a attribué dans le fichier .css :

Et comment on fait ça avec l'attribut id alors ? Et en quoi c'est différent ?

Appliquez une propriété CSS à un élément unique avec l'attribut id 

L'attribut id fonctionne selon la même méthode que class, mais il y a une différence de taille : id ne peut être utilisé qu'une fois dans le code.

Quel intérêt alors ?

En CSS, il n'y en a pas vraiment ; cela vous sera surtout utile si vous faites du JavaScript plus tard, pour reconnaître certaines balises.

En HTML, il y en a un car souvenez-vous on l'avait utilisé dans le chapitre sur le liens hypertextes pour créer des ancres.

En pratique donc, on n'utilisera en CSS un id que sur un élément qui est unique dans la page, comme le logo par exemple.

Étape 1 : marquez un élément unique avec l'attribut id dans le fichier .html 
Exemple avec le logo, élément unique, que l'on va "marquer" grâce à l'attribut id dans le fichier .html:

<img src="images/logo.png" alt="Logo du site" id="logo">

Étape 2 : appelez l'attribut  id  via un  #  dans le fichier .css 
Avec l'attribut id , on définit les propriétés de style de cet élément unique dans le fichier .css en l'appelant par un dièse#:

#logo {
/* Indiquez les propriétés CSS ici */
}

Appliquez plusieurs propriétés CSS d'un coup à un élément
En CSS, il est tout à fait possible de cumuler les styles.

Pour l'occasion, j'en profite pour vous montrer une nouvelle propriété :font-size, qui permet d'indiquer la taille d'un texte (que nous verrons plus en détail dans le chapitre suivant).

Si on veut par exemple que tous nos textes soient de la taille 30px, on peut :

déclarer le style :

.ma-classe {
    color: #663399;
}

.grand-texte {
    font-size: 30px;
}
et l'utiliser sur p (mais aussi sur vos autres éléments ; il est possible de cumuler plusieurs classes au sein d'une même balise). Par exemple :

<body>
    <h1>Titre principal</h1>
    <p>Ceci est le contenu de mon premier paragraphe</p>
    <p class="ma-classe grand-texte">Ceci est le contenu de mon deuxième paragraphe</p>
    <h2 class="grand-texte">Voilà mon sous-titre h2</h2>
</body>

De la même manière, on peut ajouter plusieurs propriétés sur un même sélecteur :

balise1
{
    propriete1: valeur1;
    propriete2: valeur2;
/* … */
}

Ok super ! Et comment je fais si je veux appliquer un style à quelque chose qui n'est pas entouré par une balise, par exemple un mot ou un groupe de mots qu'il y a dans une phrase ?

Bonne question ! Si vous avez besoin de donner un attribut à certains mots pour leur donner un style mais que ces derniers ne sont pas entourés par des balises (un attribut s'applique à une balise en entier, pas juste une partie), alors vous allez utiliser des balises universelles !

Exploitez les balises universelles

Imaginons, je veux modifier uniquement 990 espèces d'oiseaux dans le paragraphe suivant :

<p>Il existe plus de 990 espèces d’oiseaux répertoriées dans toute l’Europe.</p>
Cela serait facile à faire s'il y avait une balise autour de “990 espèces d'oiseaux”, mais malheureusement, il n'y en a pas. Par chance, on a inventé… la balise-qui-ne-sert-à-rien.

En fait, on a inventé deux balises dites "universelles", qui n'ont aucune signification particulière (elles n'indiquent pas que le mot est important, par exemple). Il y a une petite différence (mais significative) entre ces deux balises :

<span> </span>;

<div> </div>.

<span> </span> 
C'est une balise de type "inline", c'est-à-dire une balise que l'on place au sein d'un paragraphe de texte pour sélectionner certains mots uniquement. Les balises <strong>  et <em> sont de la même famille. Cette balise s'utilise donc au milieu d'un paragraphe, et c'est celle dont nous allons nous servir pour colorer “990 espèces d'oiseaux”.

<div> </div> 
C'est une balise de type "block", qui entoure un bloc de texte. Les balises <p>, <h1>  , etc., sont de la même famille. Ces balises ont quelque chose en commun : elles créent un nouveau “bloc”, dans la page, et provoquent donc obligatoirement un retour à la ligne.<div>  est une balise fréquemment utilisée dans la construction d'une mise en page, comme nous le verrons plus tard.

Pour le moment donc, nous allons plutôt utiliser la balise <span>.

À vous de jouer !

Vous allez exploiter ce que vous venez d'apprendre, et le mettre à profit dans le projet de Robbie Lens.

Pour cela, vous trouverez la base de code pour démarrer l'exercice sur la branche P2C1-exercice. 

Ici, vous allez :

créer un fichier CSS commun style.css;

appliquer la couleurblackà l'ensemble des liens ;

mettre le logo et les liens de navigation en haut des pages "Accueil" et "À propos" dans une balise div ;

mettre les différents logos en bas des deux pages dans une autre div ;

sur la page d'accueil, dans le paragraphe d'introduction, vous allez appliquer le style suivant :color: #A5B4FC; au mot "professionnalisme" et au mot "passion". Pour l'instant, vous utiliserez un  <span>  , mais nous le modifierons dans le prochain chapitre pour utiliser <em>.

Un blocage ? Retrouvez le corrigé sur la branche P2C1-solution.

En résumé

CSS est un autre langage qui vient compléter le HTML. Son rôle est de mettre en forme votre page web.

Pour écrire le code CSS, on crée un fichier séparé portant l'extension .css  comme style.css.

Pour lier les fichiers CSS et HTML, on rajoute une ligne dans la balise <head> </head> du fichier HTML :  <link href="style.css" rel="stylesheet">

En CSS, on sélectionne les portions de la page HTML qu'on veut modifier, et on change leur présentation avec des propriétés CSS :

balise1
{
    propriete1: valeur1;
    propriete2: valeur2;
}

Il existe plusieurs façons de sélectionner la portion de page que l'on veut mettre en forme. Par exemple, on peut viser :

toutes les balises d'un même type, en écrivant simplement leur nom (h1par exemple) ;

certaines balises spécifiques, auxquelles on a donné des noms à l'aide des attributs class ouid(.nom-classe ou #nom-id) ;

uniquement les balises qui se trouvent à l'intérieur d'autres balises (h3,em).

Vous avez maintenant appliqué du style à votre projet ! Bravo à vous. Dans le chapitre suivant, vous allez apprendre à utiliser d'autres propriétés CSS pour donner forme à votre texte. Alors, à tout de suite !

##############################################################################################################

Changez l'apparence du texte

Comme vous avez pu le voir dans la vidéo juste au-dessus, nous allons maintenant en profiter pour mettre en forme le texte de nos pages.

Changez la taille du texte avec la propriété CSS font-size

Pour modifier la taille du texte, on utilise la propriété CSS font-size et ensuite, on indique :

une taille absolue ;

ou une taille relative.

Indiquer une taille absolue, c’est très précis, mais il est conseillé de n'utiliser cette méthode que si on sait sur quelle taille d'écran ou dimension d'impression une personne verra le contenu de la page, car on risque d'indiquer une taille trop petite pour certains lecteurs.

Indiquer une taille relative a l'avantage d'être plus souple, elle s'adapte, selon les tailles d'écrans, plus facilement aux préférences des visiteurs.

Donnez une taille au texte avec une valeur absolue en  px  
Pour indiquer une taille absolue, on utilise généralement les pixels. Pour avoir un texte de 16 pixels de hauteur, vous devez donc écrire :

font-size: 16px;
Les lettres auront une taille de 16 pixels :

…ou optez pour une valeur relative en em  (recommandé)
Il y a plusieurs moyens d'indiquer une valeur relative. Une des plus fréquentes consiste à indiquer la taille en em.

Le texte a une taille normale avec  1em .

Le texte est plus grand avec une valeur supérieure à 1, comme  1.3em .

Le texte est plus petit avec une valeur inférieure à 1, comme  0.8em.

Attention tout de même à la syntaxe : pour les nombres décimaux, il faut mettre un point et non une virgule. Vous devez donc écrire 1.4em et non pas  1,4em  !

Si on le fait en HTML :

<p class="elem1">Élément 1 : 1em</p>
<p class="elem2">Élément 2 : 1.3em</p>
<p class="elem3">Élément 3 : 2em</p>
… et qu’on y associe le CSS ci-dessous :

.elem1 {
font-size: 1em;
}

.elem2 {
font-size: 1.3em;
}

.elem3 {
font-size: 2em;
}
… on obtient alors le résultat suivant :

Ok d'accord, mais je ne comprends pas la différence avec le pixel, à quoi ça sert une taille relative ?

Une valeur absolue en pixel comme 16px est fixe. C'est comme si je vous disais d'indiquer la taille du texte en millimètres. Si je choisis de mettre la taille d'un texte à 2 millimètres et que vous regardez ma page web depuis votre smartphone vous devriez pouvoir le lire. Maintenant, si mon site web s'affiche sur l'écran d'un stadium, à votre avis que se passera-t-il ? C'est pour cela que l'on recommande une taille relative. 16 pixels est une taille standard pour lire un texte mais peut ne pas suffire selon l'écran sur lequel il s'affiche. Une valeur relative permet de choisir une taille de la même manière qu'on utiliserait un pourcentage.

Choisissez une police avec la propriété CSS font-family

La propriété CSS qui permet d'indiquer la police à utiliser est font-family :

balise
{
    font-family: nom-police;
}
Voici une liste de polices sans sérif qui fonctionnent nativement sur la plupart des navigateurs :

Arial Black ;

Futura ;

Helvetica ;

Impact ;

Trebuchet MS ;

Verdana.

Le sérif désigne l’empattement situé à l’extrémité des caractères. Choisir une police de caractères sans sérif est plus judicieux en termes d’accessibilité, car c’est plus facile à lire.

C'est tout à fait possible d'utiliser n'importe quelle police sur son site, et ce sur la plupart des navigateurs. Pour cela, il existe plusieurs méthodes, comme importer une police depuis le site de Google Fonts.

D'ailleurs, comment fait-on pour intégrer une police de Google Fonts dans nos fichiers HTML et CSS ?

Pour cela, rendez-vous sur Google Fonts pour sélectionner une police, puis :

Copiez les balises <link> dans le <head> </head> du fichier HTML.

Utilisez la propriété font-family dans le fichier CSS pour déclarer que vous voulez utiliser cette police.

Par exemple, pour la police Roboto, on vient coller dans le HTML :

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">

Et on l'utilise dans le CSS en déclarant dans notre sélecteur :

font-family: 'Roboto', sans-serif;

Ici, on s'est contenté de suivre les étapes préconisées par Google Fonts. Mais il est également possible de télécharger une police localement, et de la joindre à notre projet HTML / CSS. Mais cette technique requiert quelques étapes de plus, et n'est pas forcément nécessaire lorsque vous débutez. Néanmoins, vous trouverez un exemple de ce genre de téléchargement de police au format spécifique et de son utilisation en CSS juste ici.

Mettez du texte en italique avec la propriété CSS font-style
En CSS, on donne une valeur à font-style  pour dire si on veut que du texte soit en italique ou non :

italic  : le texte sera mis en italique ;

normal : le texte sera normal (par défaut). Cela vous permet d'annuler une mise en italique. Par exemple, si vous voulez que les textes entre <em> ne soient plus en italique, vous devrez écrire :

em
{
    font-style: normal;
}

Mettez du texte en gras avec la propriété CSS font-weight
Pour varier la graisse d'un texte, on utilise la propriété CSS font-weight à laquelle on associe une valeur, au choix :

bold : le texte sera en gras ;

normal : le texte sera écrit normalement (par défaut) ;

thin: le texte est plus fin.

Mais il est également possible d'être plus précis et d'indiquer l'épaisseur du texte avec une valeur numérique allant de 100 à 900, du moins épais au plus épais :

Pour appliquer les différents styles de texte (épaisseur et italique) pour les polices importées, il faut bien s'assurer d'avoir importé les styles de polices correspondants. Ainsi, pour utiliser la police Roboto en italique et bold, il faudra bien avoir importé dans votre code :

<link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@1,700&display=swap" rel="stylesheet">

Soulignez du texte avec la propriété CSS text-decoration
La propriété CSS text-decoration permet, entre autres, de souligner le texte, mais pas seulement. Voici quelques-unes des différentes valeurs qu'elle peut prendre :

underline: souligné ;

line-through: barré ;

none: normal (par défaut, sauf dans le cas des liens).

Ce CSS va vous permettre de tester les effets de text-decoration:

Alignez du texte avec la propriété CSS  text-align
Le propriété CSS text-align permet d'aligner du texte selon la valeur qu'on lui donne :

left : le texte sera aligné à gauche (c'est le réglage par défaut) ;

center : le texte sera centré ;

right : le texte sera aligné à droite ;

justify  : le texte sera “justifié”.

Justifier le texte permet de faire en sorte qu'il prenne toute la largeur possible sans laisser d'espace blanc à la fin des lignes. Les textes des journaux, par exemple, sont toujours justifiés.

L'alignement ne fonctionne que sur des balises de type block : <p>, <div>, <h1>…

Aligner le texte d'une balise inline, comme  <span>,  <a>,  <em> ,  <strong> n'est pas possible. Et c'est logique quand on y pense : on ne peut pas modifier l'alignement de quelques mots au milieu d'un paragraphe.

À vous de jouer !

Maintenant que vous avez appris comment mettre du texte en forme, vous allez pouvoir appliquer cela au projet de Robbie Lens. Pour cela, vous allez :

Importer les deux polices principales du projet avec Google Font : Montserrat et Manrope.

Assigner les propriétés de polices suivantes :

les titres H1 :

3.5em  

en couleur  #A5B4FC  

police Montserrat

les paragraphes :

1.1em 

police Manrope

les listes :

1em

police Manrope

les liens :

enlever le soulignement

1em

police Manrope

Remplacer les  <span class="important"></span>  par des éléments  em  tout en gardant le même style.

Vous trouverez la base de code pour démarrer l’exercice sur la branche P2C2-exercice.

Et comme d’habitude, on ne vous abandonne pas dans la nature, la solution se trouve sur la branche P2C2-solution.

En résumé
On modifie la taille du texte avec la propriété CSS font-size.

On peut indiquer la taille en pixels, comme16px ; ou encore en “em”, comme 1.3em.

On indique la police du texte avec la propriété CSS  font-family . 

De nombreuses propriétés de mise en forme du texte existent : font-style pour l'italique, font-weight pour la mise en gras, text-decoration pour le soulignement.

Le texte peut être aligné avec la propriété CSS text-align  .

Bravo ! Vous venez encore d'ajouter une nouvelle corde à votre arc avec la mise en forme du texte. À partir de maintenant, dans mes démonstrations de code, j'utiliserai uniquement une police "sans-sérif". Dans le prochain chapitre, nous allons apprendre à ajouter de la couleur et un fond. Alors à tout de suite !

##############################################################################################################

Ajoutez de la couleur et un fond

Changez la couleur du texte avec color
La propriété CSS qui permet de modifier la couleur du texte, c'est color.

Vous l'avez déjà utilisée en lui appliquant en valeur le nom d'une couleur en anglais :

h1 {
    color: blue;
}

De nombreux noms de couleurs sont supportés par les navigateurs mais il existe d'autres manières d'indiquer une couleur en CSS :

Sous forme hexadécimale (6 chiffres précédés d'un #). Exemple :  color: #FFC8D3; 

En notation RGB (pour Red Green Blue en anglais). Exemple :  color: rgb(250,25,118);. Notez qu'on peut ajouter la notion d'opacité (ou de transparence) avec la notation RGBA, où la dernière valeur correspond à l'opacité :  color: rgba(250,25,118, 0.5); 

Si vous voulez trouver une couleur, ou bien convertir une valeur en utilisant une autre syntaxe, vous trouverez des outils en ligne, comme Coolors ou encore HTML Color Picker.

Appliquez une couleur d'arrière-plan avec background-color

Pour indiquer une couleur de fond, on utilise la propriété CSS background-color. Elle s'utilise de la même manière que la propriété color, c'est-à-dire que vous pouvez taper le nom d'une couleur, l'écrire en notation hexadécimale ou encore utiliser la méthode RGB.

Pour indiquer la couleur de fond de la page web, il vaut mieux l'appliquer à la balise  <body>  . Eh oui,  <body>  correspond à l'ensemble de la page web. C'est donc en modifiant sa couleur de fond que l'on changera la couleur d'arrière-plan de la page :

body {
    background-color: black; /* Le fond de la page sera noir */
    color: white; /* Le texte de la page sera blanc */
}


On a demandé à ce que le texte de la balise  <body>   soit écrit en blanc, et tous les paragraphes  <p>  et titres  <h1>  ont pris cette couleur. Comment ça se fait ?

La balise  <body>  contient, entre autres, les balises de paragraphe  <p>  et de titre  <h1>. Si on applique à la balise <body> une couleur de fond noire et une couleur de texte blanche, tous les titres et paragraphes seront eux aussi en blanc sur fond noir.

En CSS, si vous appliquez un style à une balise, toutes les balises qui se trouvent à l'intérieur prendront le même style. Cela s’appelle l’héritage : on dit que les balises qui se trouvent à l'intérieur d'une autre balise “héritent” de ses propriétés. (L'héritage ne fonctionne pas uniquement pour la couleur, mais pour toutes les propriétés CSS.)

C'est d'ailleurs de là que vient le nom “CSS”, qui signifie “Cascading Style Sheets”, c'est-à-dire “Feuilles de style en cascade”. Les propriétés CSS sont héritées en cascade.

Cela veut dire que TOUT le texte de ma page web sera forcément écrit en blanc ?

Non, pas obligatoirement. Si par la suite, vous voulez vos titres en violet par exemple, il faudra le préciser :

body {
    background-color: black; /* Le fond de la page sera noir */
    color: white; /* Le texte de la page sera blanc */
}

h1 {
    color: purple;
}

Ajoutez une image de fond avec  background-image

Une "image de fond" ne s'applique pas forcément à la page entière. On peut aussi mettre une image de fond derrière des titres, ou des paragraphes uniquement.

Appliquez une image de fond derrière un élément HTML
La propriété permettant d'indiquer une image de fond est background-image. Comme valeur, on doit renseigner l'adresse indiquant où se trouve l'image de fond. Elle peut être écrite en absolu (http://…) ou en relatif (fond.png).

Attention lorsque vous écrivez une adresse en relatif dans le fichier CSS : l'adresse de l'image doit être indiquée par rapport au fichier .css et non pas par rapport au fichier .html  . Pour simplifier les choses, je vous conseille de placer l'image de fond dans le même dossier que le fichier .css  (ou dans un sous-dossier).

Voyons tout de suite à quoi ça ressemble !

On écrit dans le fichier HTML :

<body>
    <div class="banniere">
        <h1>Mon blog</h1>
    </div>
    <p>Ceci est le contenu de mon premier paragraphe</p>
    <p>Ceci est le contenu de mon deuxième paragraphe</p>
</body>

Puis dans le fichier CSS :

body {
    font-family: sans-serif;
    margin: 0; /* Vous ne connaissez pas encore cette propriété mais elle permet de s'assurer que nos éléments prennent bien toute la largeur de la page */
}

.banniere {
    padding: 100px; /* Vous ne connaissez pas encore cette propriété mais elle permet d'ajouter de l'espace dans notre élément*/
    background-image: url('paysage.jpg');
}

h1 {
    color: white;
    text-align: center;
}

Et on obtient :

Dans le fichier HTML, on a mis la balise du titre à l'intérieur d'une balise div qu'on a nommée banniere. Dans le fichier CSS, on a ajouté sur la classe banniere, une image qu'on place en fond grâce à la propriété background-image.

Une image en fond du titre

C'est bien beau tout ça, mais l'image apparaît floue : elle n'est pas aux bonnes dimensions. Pour corriger cela, on va voir ensemble comment changer le comportement de l'image de fond.

Modifiez le comportement d'une image de fond

Pour changer le comportement d'une image de fond, il existe plusieurs propriétés CSS :

La propriété CSS background-attachment associée à la valeur  fixed  permet de rendre l'image de fond fixe lorsqu'on déroule la page web : background-attachment: fixed;

La propriété CSS background-size associée à la valeur  cover  permet de redimensionner l'image afin qu'elle s'adapte à la taille de l'élément qui la contient (elle garde ses proportions, en rognant la largeur ou la hauteur en fonction de la taille de l'élément qui la contient) :  background-size: cover;

La propriété CSS background-position associée aux valeurs  top ,  bottom ,  left ,  center  ou  right  permet d'indiquer où doit se trouver l'image de fond, par exemple :  background-position: top right;

Chacune de ces 3 propriétés possède plusieurs valeurs possibles qu'on peut leur associer. Je vous invite à aller tester en direct sur le site de Mozilla Developer les différents effets possibles des propriétés :

background-attachment ;

background-size ;

background-position.

De nombreux paramètrages existent en ce qui concerne les images de fond. Si vous voulez en savoir plus, vous pouvez vous référer à la documentation de la propriété CSS background.

Combinez ces propriétés CSS avec la "super-propriété"  background
Si vous utilisez beaucoup de propriétés en rapport avec le fond,  vous pouvez utiliser une sorte de “super-propriété” appelée  background  dont la valeur peut combiner plusieurs des propriétés :  

background-image  ;

background-repeat  ;

background-attachment  ;

background-size ;

et  background-position  .

C'est la première “super-propriété” que je vous montre, il y en aura d'autres.

On peut donc tout simplement écrire :

.banniere
{
    background: url("paysage.jpg") cover center;
}

Il faut savoir que :

l'ordre des valeurs n'a pas d'importance : vous pouvez combiner les valeurs dans n'importe quel ordre ;

vous n'êtes pas obligé de mettre toutes les valeurs.

Créez des dégradés avec  linear-gradient
Pour créer un dégradé, on a besoin de la propriété CSS  background  :

background: linear-gradient(90deg, #8360c3, #2ebf91);

Si je devais lire en français cette ligne de CSS, voici ce que ça donnerait :

"J'applique un dégradé linéaire, à 90 degrés, en partant de la couleur  #8360c3  pour arriver à la couleur  #2ebf91.

Ce qui nous permet d'obtenir un très beau dégradé :

Le dégradé va du violet au vert

Ici, on utilise linear-gradient mais il existe d'autres manières de créer des dégradés. Si vous voulez de l'inspiration en termes de dégradés, rendez-vous sur UI Gradients, et si vous voulez construire vos propres dégradés, je vous conseille CSS Gradient. 

Jouez sur la transparence avec la propriété CSS opacity

La propriété CSS opacity  permet d'indiquer le niveau d'opacité (c'est l'inverse de la transparence).

Avec une valeur de 1, l'élément sera totalement opaque : c'est le comportement par défaut.

Avec une valeur de 0, l'élément sera totalement transparent.

Il faut donc choisir une valeur comprise entre 0 et 1. Ainsi, avec une valeur de 0.6 , votre élément sera opaque à 60 %… et on verra donc à travers !

Jetez un œil à ce GIF auquel on applique 0.6 , puis 0.4 et enfin 0.2 :

Comme vous pouvez le voir, si vous appliquez la propriété opacity à un élément de la page, tout le contenu de cet élément sera rendu transparent (même les images, les autres blocs à l'intérieur, etc.). Si vous voulez juste rendre la couleur de fond transparente, utilisez plutôt la notation RGBA que vous avez vue dans la vidéo d'introduction du chapitre.

À vous de jouer !

Maintenant que vous maîtrisez les couleurs et l'héritage en CSS, vous allez pouvoir en tirer parti pour le projet de Robbie Lens ! Pour cela, vous devrez :

changer les couleurs de fond pour que :

la  div  dans laquelle on a les liens en haut des pages, et le pied de page, aient un fond blanc,

le cœur de la page ait un fond correspondant à  #1F2039 ;

… et les couleurs de texte pour que :

les liens en tête et pied de page soient de couleur  #242424 ,

les paragraphes, les listes et les titres H2 soient de la couleur  #F9F8FF  (sur fond bleu foncé).

Vous trouverez également des liens hypertextes qui ont été ajoutés : "Un projet ? Écrivez-moi" et "Voir mon portfolio". Vous devrez leur ajouter un dégradé qui passe de la couleur  #8E86B5  à la couleur  #ACAEED  et les mettre dans la police Manrope, en blanc.

C'est normal si votre couleur de fond a une petite marge, nous corrigerons cela dans quelques chapitres.

En résumé

On change la couleur du texte avec la propriété  color  et la couleur de fond avec la propriété background-color.

On peut indiquer une couleur en écrivant son nom en anglais, black  par exemple, sous forme hexadécimale, comme  #FFC8D3, ou en notation RGB, comme  rgb(250,25,118).

On peut ajouter une image de fond avec la propriété  background-image. On peut choisir de fixer l'image de fond, ou encore de la positionner où on veut sur la page.

On peut rendre une portion de la page transparente avec la propriété  opacity  ou avec la notation  RGBA  (une extension de la notation RGB, où la quatrième valeur indique le niveau de transparence).

Bravo à vous ! Les couleurs et les fonds en CSS n'ont plus de secret pour vous ! Dans le chapitre suivant, vous allez découvrir deux notions très importantes : les bordures et les ombres. C'est parti !

#################################################################################################################

Créez des bordures et des ombres

Créez des bordures avec la propriété CSS  border
Le CSS offre un large choix de bordures : border-width,  border-color,  border-style…

Pour aller à l'essentiel, je vous propose ici d'utiliser directement la super-propriété border qui regroupe l'ensemble de ces propriétés. Vous vous souvenez de la super-propriété  background  dans le chapitre précédent ? Cela fonctionne sur le même principe : on va pouvoir combiner plusieurs valeurs.

Avec  border, on peut utiliser jusqu'à trois valeurs pour modifier l'apparence de la bordure :

La largeur que l'on définit avec une valeur en pixels (comme 2px).

La couleur que l'on indique avec un nom de couleur, une valeur hexadécimale, ou une valeur RGB.

Le type de bordure qui peut être solid (un trait simple),  double (un double trait), dotted (un trait en pointillés), dashed (un trait en tirets), ou autre. Vous avez un large panel d'options :

Si vous voulez mettre des bordures différentes en fonction du côté (haut, bas, gauche ou droite), vous pouvez le faire sans problème. Dans ce cas, vous devrez utiliser ces quatre propriétés :

border-top  : bordure du haut.

border-bottom  : bordure du bas.

border-left  : bordure de gauche.

border-right  : bordure de droite.

Il existe aussi des équivalents pour paramétrer chaque détail de la bordure si vous le désirez :

border-top-width  pour modifier l'épaisseur de la bordure du haut,

border-top-color  pour la couleur du haut, etc.

Ce sont aussi des super-propriétés, elles fonctionnent comme  border  mais elles ne s'appliquent donc qu'à un seul côté.

On pourrait faire une compilation de nos éléments juste au-dessus.

On écrit dans le fichier HTML :

<p class="element">Élément</p>
Puis dans le CSS:

.element {
    border-top: 3px #EB5353 dotted;
    border-right: 3px #F9D923 double;
    border-bottom: 3px #36AE7C dashed;
    border-left: 3px #187498 solid;
}
Ce qui nous donnerait :

Bon ce n'est pas forcément du plus bel effet, mais c'était pour la démonstration !

En tout cas, vous pouvez aller tester ces différentes propriétés et vous amuser à recréer l'élément ci-dessus avec le CodePen P2C4a.

On pourrait très bien avoir un élément qui n'aurait un bord que d'un seul côté. Pour cela, il suffit de ne déclarer qu'une seule propriété. Ici, on utilise uniquement la propriété  border-left  :

.element {
    font-size: 25px;
    background-color: skyblue;
    border-left: 5px #187498 solid;
    padding: 100px;
}
Ce qui donne :

Arrondissez vos angles avec  border-radius

La propriété CSS border-radius permet d'arrondir les angles de n'importe quel élément. Il suffit d'indiquer la taille de l'arrondi en pixels :

.element {
    font-size: 25px;
    background-color: skyblue;
    border-radius: 10px;
    padding: 100px;
}
Ce qui donne :

Tout comme pour les bordures, il n'y a aucune obligation d'avoir les mêmes arrondis partout : on peut aussi préciser la forme de l'arrondi pour chaque coin. D'un point de vue design, c'est très pratique lorsqu'on souhaite coller deux formes qui ont des border radius, par exemple pour des "groupes de boutons". Vous trouverez plus d’infos sur Bootstrap.

Dans ce cas, indiquez les quatre valeurs correspondant aux angles dans la propriété  border-radius  , dans cet ordre :

En haut à gauche.

En haut à droite.

En bas à droite.

En bas à gauche.

.element {
    font-size: 25px;
    background-color: skyblue;
    border-radius: 10px 30px 0px 90px;
    padding: 100px;
}
Ce qui donne :

Il est même possible de créer des courbes elliptiques avec  border-radius .Pour cela, il faut indiquer deux valeurs séparées par une barre oblique (slash) :  /. Mais le rendu est assez dur à anticiper. Il vaut mieux utiliser des outils de visualisation comme  Fancy Border Radius du rendu final :

Il ne reste plus qu'à cliquer sur "copy" pour reporter la valeur du border-radius générée automatiquement (sans oublier le point virgule  ;  à la fin de la ligne) dans notre code :

.element {
    font-size: 25px;
    background-color: skyblue;
    border-radius: 30% 70% 70% 30% / 30% 58% 42% 70%;
    padding: 100px;
}
Et voilà le résultat ! De quoi faire des éléments (boutons, encarts, blocs…) uniques sur votre site web :

Ajoutez une ombre portée avec la propriété CSS  box-shadow
Les ombres donnent des effets de profondeur intéressants sur une page web. C'est particulièrement utile sur les boutons d'un site par exemple. Du fait de l'impression de relief, un bouton avec une ombre portée indique visuellement aux visiteurs du site qu'il est "cliquable".

La propriété CSS box-shadow  s'applique à tout le bloc, et prend quatre valeurs dans l'ordre suivant :

Le décalage horizontal de l'ombre.

Le décalage vertical de l'ombre.

L'adoucissement du dégradé.

La couleur de l'ombre.

L'adoucissement peut être :

faible (si on lui donne une valeur inférieure à celle du décalage),

normal (si on lui donne une valeur égale à celle du décalage)

ou élevé (si on lui donne une valeur supérieure à celle du décalage).

Par exemple :

.element {
    font-size: 25px;
    background-color: skyblue;
    border-radius: 10px;
    box-shadow: 6px 6px 0px rgba(0, 0, 0);
    padding: 100px;
Ce qui donne :

On obtient une ombre noire, portée horizontalement et verticalement, de 6 pixels, sans adoucissement. Ce qui n'est pas forcément l'effet recherché… Ajoutons donc un adoucissement grâce au troisième paramètre de la propriété  box-shadow  , tout en jouant sur l'opacité de la couleur avec RGBA :

.element {
    font-size: 25px;
    background-color: skyblue;
    border-radius: 10px;
    box-shadow: 6px 6px 25px rgba(0, 0, 0, 0.5);
    padding: 100px;
}

Ce qui donne :

Il n'est pas toujours simple de trouver l’effet d’ombre désiré à tâtons. Pour vous aider, vous pouvez :

utiliser l’outil Shadows Brumm ;

vous inspirer des exemples listés sur CSS Scan.

Ajoutez une ombre à un texte avec  text-shadow
text-shadow permet d'ajouter une ombre sur les lettres de votre texte. Effet vintage garanti !

Les valeurs fonctionnent exactement de la même façon que  box-shadow :

décalage horizontal,

décalage vertical,

adoucissement,

et couleur.

Voyez ce que ça donne dans le morceau de code juste en dessous :

h1 {
    font-size: 50px;
    text-shadow: 3px 3px 0px rgba(0,0,0,0.2);
    padding: 100px;
}
Et voyez ce que ça nous donne :

Je vous invite maintenant à aller vous entraîner à maitriser toutes les propriétés que l'on a vues dans ce chapitre avec le CodePen P2C4b.

À vous de jouer !

