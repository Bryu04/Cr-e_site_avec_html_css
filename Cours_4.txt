                               Utilisez des fonctionnalités avancées de HTML et CSS

Ajoutez des tableaux

Créez un tableau en HTML et CSS

La balise en paire <table> </table> indique le début et la fin d'un tableau. Cette balise est de type  block  , on va donc la placer en dehors d'un paragraphe ou d'une  div  .

Indiquez les valeurs du tableau avec les balises HTML  <tr>  et  <td> 

Pour construire un tableau ligne par ligne, on indique pour chaque ligne, <tr>  (pour table row ou "rangée du tableau"), le contenu des différentes cellules,<td>  (pour table data ou "donnée" ou "entrée") :

  - <tr> </tr> indique le début et la fin d'une ligne du tableau ;

  - <td> </td>  indique le début et la fin du contenu d'une cellule.

On a une balise de ligne  <tr>  qui englobe un groupe de cellules  <td>  .

Par exemple, si je veux faire un tableau à deux lignes, avec trois cellules par ligne (donc trois colonnes), je devrai taper ceci :

<table>
    <tr>
        <td>Carmen</td>
        <td>33 ans</td>
        <td>Espagne</td>
    </tr>
    <tr>
        <td>Michelle</td>
        <td>26 ans</td>
        <td>États-Unis</td>
    </tr>
</table>

Bon, le résultat est un peu déprimant :

C'est un tableau, ça ? Le texte s'est écrit à la suite et il n'y a même pas de bordures…

Oui, un tableau HTML sans CSS paraît bien vide…

Ajoutez des bordures au tableau HTML grâce à la propriété CSS  border

Pour ajouter des bordures, on utilise le sélecteur CSS correspondant !

On utilise td pour sélectionner toutes les cellules des tableaux de la page. Donc pour créer des bordures à nos cellules, on fait :

td /* Toutes les cellules des tableaux... */
{
    border: 1px solid black; /* auront une bordure de 1px */
}

Et voici le résultat juste en dessous :

Hum, ce n'est pas encore aussi parfait que ce qu'on voudrait. En effet, on aimerait qu'il n'y ait qu'une seule bordure entre deux cellules, or ce n'est pas le cas ici.

Collez les bordures du tableau HTML avec la propriété CSS  border-collapse
border-collapse est une propriété CSS qui permet de “coller les bordures entre elles”. Elle peut prendre deux valeurs :

  1. collapse  : les bordures seront collées entre elles, c'est l'effet qu'on recherche ici ;

  2. separate  : les bordures seront dissociées (valeur par défaut).

On écrit :

table {
    border-collapse: collapse;
}

td {
    border: 1px solid black;
}

Ce qui nous permet d'obtenir :

Voilà qui est mieux !

Ajoutez une ligne d'en-tête au tableau avec la balise HTML  <th>

La ligne d'en-tête se crée avec un  <tr>  mais les cellules qu'elle contient sont, cette fois, encadrées par des balises <th>  (pour table header ou "en-tête de tableau" en français) et non pas  <td>  !

<table>
    <tr>
        <th>Nom</th>
        <th>Âge</th>
        <th>Pays</th>
    </tr>
    <tr>
        <td>Carmen</td>
        <td>33 ans</td>
        <td>Espagne</td>
    </tr>
    <tr>
        <td>Michelle</td>
        <td>26 ans</td>
        <td>États-Unis</td>
    </tr>
</table>

La ligne d'en-tête est très facile à reconnaître pour deux raisons :

  - les cellules sont des<th>  au lieu des  <td>  habituels ;

  - c'est la première ligne du tableau (c'est idiot, mais encore faut-il le préciser).

Comme le nom des cellules est un peu différent pour l'en-tête, il faut penser à mettre à jour le CSS pour lui dire d'appliquer une bordure sur les cellules normales et sur l'en-tête :

table {
    border-collapse: collapse;
}

td, th /* Mettre une bordure sur les td ET les th */ {
    border: 1px solid black;
}

Ce qui donne :

Comme vous pouvez le constater, le navigateur a mis en gras le texte des cellules d'en-tête. C'est ce que font en général les navigateurs mais, si vous le désirez, vous pouvez changer cela à coups de CSS : modifier la couleur de fond des cellules d'en-tête, leur police, leur bordure, etc. Pour cela, il vous suffit d'utiliser le sélecteur  th  dans le CSS !

Donnez un titre au tableau avec la balise HTML  <caption>
Normalement, tout tableau doit avoir un titre. Le titre permet de renseigner rapidement le visiteur sur le contenu du tableau. Notre exemple est constitué d'une liste de personnes… oui, mais alors ? Qu'est-ce que cela représente ? Sans titre de tableau, vous le voyez, on est un peu perdu.

Heureusement, il y a <caption> pour ajouter un titre à notre tableau  !

Cette balise se place tout au début du tableau, juste avant l'en-tête. C'est elle qui contient le titre du tableau :

<table>
    <caption>Passagers du vol 377</caption>
    <tr>
        <th>Nom</th>
        <th>Âge</th>
        <th>Pays</th>
    </tr>
    <tr>
        <td>Carmen</td>
        <td>33 ans</td>
        <td>Espagne</td>
    </tr>
    <tr>
        <td>Michelle</td>
        <td>26 ans</td>
        <td>États-Unis</td>
    </tr>
</table>

Et voilà le résultat :

Vous pouvez changer la position du titre avec la propriété CSS caption-side. Par défaut, la valeur est  top  (au-dessus du tableau), mais vous pouvez aussi indiquer  bottom  :  le titre sera alors placé en dessous du tableau.

Bon mais on étouffe encore un peu avec ce tableau très compacte !

Oui d'ailleurs, comment on fait pour ajouter des marges dans un tableau, avec du  padding  ?

Exactement, et ça se fait côté CSS avec la propriété padding!

Ajoutez des marges à un tableau HTML avec la propriété CSS  padding
Pour correctement ajouter des marges à toutes nos cellules, y compris celles de l'en-tête, on va ajouter la propriété CSS  padding sur les sélecteurs  td  et  th  à la fois (comme on l'avait fait pour ajouter des bordures, souvenez-vous) :

td, th {
    border: 1px solid black;
    padding: 15px;
}

Et voilà le résultat avec une marge de 15 pixels :

C'est mieux !

Et comment on fait pour centrer un tableau ? Par défaut il est à gauche…

C'est simple, et ça se passe une fois de plus dans le fichier CSS, cette fois, au niveau du sélecteur  table !

Centrez un tableau HTML avec la propriété CSS  margin
Un peu plus haut dans le chapitre avait utilisé le sélecteur  table  pour ajouter la propriété CSS  border-collapse  qui nous permettait de "coller" les cellules entre elles.

C'est également sous le sélecteur  table  qu'on va indiquer au navigateur de centrer le tableau sur la page grâce à la propriété CSS  margin  , pour laquelle on va préciser la valeur auto:

table {
    border-collapse: collapse;
    margin: auto;
}

Voici ce que ça donne :

Super ! Bon maintenant, voyons comment structurer un tableau un peu plus complexe. Nous avons appris à construire un petit tableau simple. Cela peut suffire dans la plupart des cas, mais vous aurez parfois besoin de réaliser des tableaux plus… complexes.

Structurez un grand tableau avec des balises HTML

Divisez un tableau avec les balises HTML  thead,  tbody et  tfoot
Si votre tableau est assez gros, vous aurez tout intérêt à le découper en plusieurs parties. Pour cela, il existe des balises HTML qui permettent de définir les trois “zones” du tableau :

  1. l'en-tête du tableau (en haut) se définit avec les balises <thead></thead>  

  2. le corps du tableau (au centre) se définit avec les balises <tbody></tbody>  

  3. le pied du tableau (en bas) se définit avec les balises <tfoot></tfoot>

Vous vous servirez de ces balises, surtout si votre tableau est assez gros, et que vous avez besoin de l'organiser plus clairement. Pour les “petits” tableaux, vous pouvez garder sans problème l'organisation plus simple que nous avons vue au début.

Ok d'accord, mais en fait, je vois bien ce qu'on peut mettre en en-tête et à l'intérieur du tableau, mais que mettre dans le pied de tableau ?

Vous pouvez par exemple y mettre un résumé, ou un total. Le pied de tableau se mettra, comme l'en-tête, par défaut, en gras :

Dans cet exemple de tableau, ce n'est pas forcément très parlant de mettre le même contenu dans l'en-tête et le pied du tableau. Mais cela peut être utile lorsqu'un tableau est très long.

Entraînez-vous et manipulez le code de ce tableau sur le CodePen P4C1a.

Vous l'aurez sûrement remarqué dans le code HTML : c'est un peu déroutant, mais il est conseillé d'écrire les balises dans l'ordre suivant :

  1. <thead>

  2. <tfoot>

  3. <tbody>

Fusionnez des cellules du tableau avec les attributs colspan et rowspan

Pour fusionner des cellules entre elles, il suffit d'ajouter un attribut dans la balise HTML <td>. Cela permet d'indiquer le nombre de cellules à fusionner entre elles (la balise des cellules).

II existe deux attributs pour deux types de fusions différentes :

  1. l'attribut  colspan  permet de fusionner des colonnes : la fusion s'effectue horizontalement, aussi bien 
     sur les lignes d'en-tête que sur le contenu lui-même. 

  2. l'attribut  rowspan  permet de fusionner des lignes : là, deux lignes seront groupées entre elles. La 
     fusion s'effectuera verticalement.

Voyons tout de suite à quoi cela peut ressembler :

Vous trouverez le code utilisé pour réaliser ce tableau dans le CodePen P4C1b.

Notez qu'on peut modifier l'alignement vertical du texte des cellules de tableaux avec la propriétévertical-align qu'on a vue dans le chapitre "Abordez d'autres techniques de mise en page".

À vous de jouer !

Vous allez maintenant pouvoir construire le tableau des tarifs de Robbie Lens !

Vous verrez que la base de code a été réorganisée :

  - le fichier CSS a été découpé en 4 fichiers CSS différents qui se trouvent dans le dossier  style ;

  - le fichier de base  style.css  est importé par chaque page ;

  - chaque page possède son propre fichier CSS.

Vous ajouterez les tarifs à la suite de la page "À propos", après le lien Call to action (appel à l’action).

Voilà à quoi le tableau devrait ressembler :

Comme d'habitude, vous trouverez la base de code pour faire l’exercice sur la branche P4C1-exercice, et vous pouvez consulter la solution sur la branche P4C1-solution pour vérifier vos acquis.

En résumé

- Un tableau s'insère avec la balise HTML  <table>  et se définit ligne par ligne avec  <tr>.

- Chaque ligne comporte des cellules  <td>  (cellules normales) ou  <th>   (cellules d'en-tête).

- Le titre du tableau se définit avec  <caption>.

- On peut ajouter une bordure aux cellules du tableau HTML avec la propriété CSS border  . Pour coller les 
  bordures entre elles, on utilise la propriété CSS  border-collapse.

- Un tableau peut être divisé en trois sections grâce aux balises HTML <thead>  (en-tête),  <tbody>  (corps) 
  et  <tfoot>  (bas du tableau). L'utilisation de ces balises n'est pas obligatoire.

- En HTML, on peut fusionner des cellules horizontalement avec l'attribut  colspan, ou verticalement avec  
  rowspan. Il faut indiquer combien de cellules doivent être fusionnées.

Dans le chapitre suivant, on va apprendre à créer des formulaires. Alors à tout de suite !

##############################################################################################################

Créez des formulaires

Pour créer un formulaire, vous aurez besoin de la balise HTML <form> </form>, elle permet d'indiquer le début et la fin du formulaire.

Voici les deux attributs indispensables pour construire un formulaire fonctionnel :

  1. L'attribut method indique par quel moyen les données vont être envoyées. Ne vous en préoccupez pas pour 
     le moment. Sachez juste que les méthodes les plus utilisées sont get et post.

  2. L'attribut action indique l'adresse de la page ou du programme qui va traiter les informations. 

Tout cela va nous permettre de créer la structure de base d’un formulaire en HTML :

<p>Texte avant le formulaire</p>
    <form method="get" action="">
        <p>Texte à l'intérieur du formulaire</p>
    </form>
<p>Texte après le formulaire</p>

Je donne la valeur  get  à l'attribut  method ; et je laisse un champ vide : " " pour  action.

Pourquoi est-ce qu'on le laisse un champ vide dans l'attribut  action  ?

Si notre projet comportait également du code en *backend, c'est là qu'on indiquerait une URL qui pourrait traiter notre formulaire. Mais ici, en laissant un champ vide, on indique à notre formulaire qu'on restera sur la même URL, ce qui nous permettra plus tard d'inspecter ce qu'on obtient, assez simplement.

*En règle générale, un site internet est composé de deux parties :

  1. une partie frontend, c’est la partie visible de notre site internet, celle qui s’affiche dans votre 
     navigateur grâce à HTML, CSS et JavaScript ; 

  2. une partie backend, qui se trouve hébergée et qui s’exécute sur un serveur web. Elle permet de faire des 
     tâches plus complexes, comme traiter un formulaire, envoyer un mail, sauvegarder des informations dans 
     une base de données, etc.

Voyons maintenant quelle balise HTML utiliser pour saisir du texte dans un formulaire.

Insérez des champs de texte avec la balise HTML  <input>

La balise HTML <input> est une balise orpheline.

On la retrouvera plusieurs fois dans ce chapitre. Souvent, ce sera la valeur de son attribut, type, qui changera selon le type de champ que l'on veut ajouter : texte monoligne, email, date, etc.

Ajoutez une zone de texte monoligne avec  <input type="text">
Une zone de texte monoligne est une zone de texte d’une seule ligne. On l'utilise pour des champs de texte qui ne requièrent que quelques mots, comme un nom ou un prénom, par exemple.

On ouvre avec la balise <input> et on précise la valeur de l'attribut (type="text" ) pour indiquer qu'il s'agit d'une zone de texte d'une seule ligne :

<input type="text">

Ensuite, il faut donner un nom à votre zone de texte ; pour cela on utilise l'attribut  name.

Ce nom n'apparaît pas sur la page, mais il est indispensable parce qu’il permettra plus tard d'identifier le champ d'où viennent les informations.

Commençons par demander au visiteur de renseigner son prénom. On écrit alors :

<input type="text" name="prenom">
Voici ce que cela donne pour un formulaire très basique avec uniquement notre champ de texte monoligne qui demande son prénom au visiteur du site :

<form method="get" action="">
    <input type="text" name="prenom">
</form>

Comment le visiteur saura qu'il faut renseigner son prénom si l'attribut name ne s'affiche pas ?

Bien vu ! Lorsqu’un visiteur tombe sur un champ de texte à saisir, il ne sait pas toujours ce qu'il doit y écrire. C'est justement le rôle du champ libellé !

Ajoutez un champ de libellé avec la balise HTML  <label> </label>

Un libellé est un champ de texte prérempli avec une indication pour guider le visiteur du site sur ce qu’il doit écrire. On crée un champ de libellé avec la balise HTML<label> </label>  :

<form method="get" action="">
    <label>Votre prénom</label> : <input type="text" name="prenom">
</form>

Mais cela ne suffit pas : il faut lier le label à la zone de texte.

Pour ce faire, on doit donner un nom à la zone de texte, non pas avec l'attribut  name  mais avec l'attribut id  (que l'on peut utiliser sur toutes les balises).

Un attribut  name  et un attribut id  sur le champ ? Cela ne va-t-il pas faire double emploi ?

 - L'attribut id est utilisé pour identifier l'élément HTML afin d’y accéder et de le manipuler. Il est donc 
   unique pour cet élément.

- L'attribut name, lui, réfère à la variable du formulaire que l’élément concerne. Ici, il n’y a qu’un seul 
  élément qui pourra référer à la variable  prenom  ;  name et  id  auront donc la même valeur. Mais lorsque 
  nous utiliserons des  checkbox  ou des  radio, plusieurs éléments correspondront à la même variable. Mais 
  nous verrons cela un peu plus tard, et vous comprendrez mieux. 

Pour lier le label au champ, il faut lui donner un attribut  for  qui a la même valeur que l' id  du champ :

<form method="get" action="">
    <p>
        <label for="prenom">Votre prénom</label> : <input type="text" name="prenom" id="prenom">
    </p>
</form>

Ce qui veut dire en français :

"Pour le champs de texte monoligne, nommé  prenom, il y aura un libellé "Votre prénom" qui s'affichera".

On peut ajouter un certain nombre d'autres attributs à la balise  <input>  pour personnaliser son fonctionnement :

 - agrandir le champ avec  size  ;

 - limiter le nombre de caractères que l'on peut saisir avec  maxlength  ;

 - pré-remplir le champ avec une valeur par défaut à l'aide de  value  ;

 - donner une indication sur le contenu du champ avec  placeholder . Cette indication disparaîtra dès que le 
   visiteur aura cliqué à l'intérieur du champ.

Dans l'exemple suivant, la zone de texte contient une indication permettant de comprendre ce qu'il faut saisir ; le champ fait 30 caractères de long, mais on ne peut écrire que 20 caractères maximum à l'intérieur :

<form method="get" action="">
    <p>
        <label for="prenom">Votre prénom :</label>
        <input type="text" name="prenom" id="prenom" placeholder="Ex. : Mathieu" size="30" maxlength="20">
    </p>
</form>

Testez vous-même le résultat pour observer le comportement du champ. En attendant, voici le rendu du champ dans son état initial (avant que le visiteur ne renseigne quoi que ce soit) :

Ajoutez une zone de texte multiligne avec  <textarea> </textarea>

Une zone de texte multiligne est une zone de texte de plusieurs lignes. C’est utilisé dans le cas où le visiteur d’un site aurait besoin d’écrire un paragraphe de texte dans un formulaire.

Pour créer une zone de texte multiligne, on utilise :<textarea> </textarea>  .

Comme pour tout autre élément du formulaire, il faut lui donner un nom avec  name  et utiliser un  label   qui explique de quoi il s'agit :

<form method="get" action="">
    <p>
        <label for="ameliorer">Des conseils pour améliorer mon site ?</label><br>
        <textarea name="ameliorer" id="ameliorer"></textarea>
    </p>
</form>

Et voici le résultat en image :

Grâce à la poignée située en bas à droite de la zone de texte, le visiteur peut étirer le champ pour mieux visualiser ce qu'il écrit (ce qui n'est pas possible avec un champ de texte monoligne) :

Mais on peut modifier la taille par défaut du  <textarea>, et ce, de deux façons différentes :

  1. En appliquant au  <textarea>  les propriétés CSS width  et height .

  2. En ajoutant à la balise  <textarea>  les attributs :

      1. rows  (indique le nombre de lignes qui peuvent être affichées) ;

      2. et  cols  (indique le nombre de colonnes qui peuvent être affichées). 

Vous pouvez pré-remplir le  <textarea>  avec une valeur par défaut. Dans ce cas, on n'utilise pas l'attribut  value  : on écrit tout simplement le texte par défaut entre la balise ouvrante et la balise fermante !

Ok mais on n'avait pas parlé plus haut de la balise  input  ? Et expliqué que ce serait l'attribut  type  qui changerait selon le type de champ ? Or on a déjà vu deux autres champs (libellé et multiligne qui ont des balises spécifique, je ne comprends pas.

Vous avez raison, les balises libellé et zone de texte multiligne sont spécifiques : libellé n'est pas un champ de saisie (le visiteur ne rempli pas un libellé, c'est juste une indication pour lui) ; et le textearea permet de spécifier un champs étirable.

Cela dit, en dehors du champs de texte monoligne, il existe d'autres type de saisie. On utilisera alors la balise  input  et l'attribut  type  (pour lequel on indiquera un type de champ en particulier).

Utilisez  <input>  pour des formats de saisie particuliers

Vous pouvez créer de nombreux types de champs de saisie :

Type de champ                     Code

un e-mail                         <input type="email">

une URL                           <input type="url">

                                  On peut demander à saisir une adresse absolue, 
                                  commençant généralement par  http:// 

un numéro de téléphone            <input type="tel">

un nombre entier                  <input type="number">

                                  Le champ s'affiche en général avec des petites flèches pour 
                                  changer la valeur.

un curseur 
(aussi appelé “slider”)           <input type="range">

                                  On utilise range pour demander au visiteur 
                                  une valeur comprise entre deux bornes :

une date                          Différents types de champs de sélection de date existent, comme 

                                  <input type="date"> pour sélectionner une date :


                                  Mais il existe des variantes :

                                  <input type="time"> pour l'heure ;

                                  <input type="week">  pour la semaine ;

                                  <input type="month"  pour le mois ;

                                  <input type="datetime">  pour la date et l'heure (avec 
                                  gestion du décalage horaire) ;

                                  <input type="datetime-local">  pour la date et l'heure (sans 
                                  gestion du décalage horaire).

                                  Vérifiez bien quels navigateurs gèrent ce type de champ, 
                                  il n'est pas encore complètement reconnu.

une recherche                     <input type="search">


Pour les types de champs nombre, date et curseur, vous pouvez personnaliser le fonctionnement du champ avec les attributs suivants :

      - min  : valeur minimale autorisée ;

      - max  : valeur maximale autorisée ;

      - step  : c'est un “pas” de déplacement. Si vous indiquez un pas de 2, le champ n'acceptera que des 
                valeurs de 2 en 2 (par exemple 0, 2, 4, 6…).

Laissez le visiteur choisir une option

HTML offre plusieurs manières de choisir une ou des option(s) dans un formulaire. Ce sont des éléments qui demandent au visiteur de faire un choix parmi une liste de possibilités, comme :

   1. Les cases à cocher (plusieurs choix possibles).

   2. Les boutons radio (un seul choix possible).

   3. Les listes déroulantes (un seul choix possible).

Insérez des cases à cocher avec  <input type="checkbox">

On crée une case à cocher avec la balise  <input>  en spécifiant le type  checkbox qui signifie "case à cocher" en français :

<input type="checkbox" name="choix">

Rajoutez un  <label>  et le tour est joué :

<form method="get" action="">
    <p>
        Cochez les aliments que vous aimez manger :<br>
        <input type="checkbox" name="frites" id="frites"> <label for="frites">Frites</label><br>
        <input type="checkbox" name="steak" id="steak"> <label for="steak">Steak</label><br>
        <input type="checkbox" name="epinards" id="epinards"> <label for="epinards">Épinards</label><br>
        <input type="checkbox" name="huitres" id="huitres"> <label for="huitres">Huitres</label>
    </p>
</form>

Ce qui donne, une liste d'aliments (le visiteur a la possibilité d'en cocher plusieurs) :

N'oubliez pas de donner un nom différent à chaque case à cocher, cela vous permettra d'identifier plus tard lesquelles ont été cochées par le visiteur.

Vous pouvez faire en sorte qu'une case soit cochée par défaut, avec l'attribut  checked  :  <input type="checkbox" name="choix" checked>.

Normalement, tout attribut possède une valeur. Dans le cas présent, en revanche, ajouter une valeur n'est pas obligatoire : la présence de l'attribut suffit à faire comprendre à l'ordinateur que la case doit être cochée. Si cela vous perturbe, sachez que vous pouvez donner n'importe quelle valeur à l'attribut (certains développeurs écrivent parfois checked="checked" mais c'est un peu redondant). Dans tous les cas, la case sera cochée.

Insérez des boutons radio avec  <input type="radio">

Les boutons radio permettent au visiteur de faire un choix (et un seul) parmi une liste de possibilités. Il y a une petite difficulté supplémentaire par rapport aux cases à cocher : il faut organiser les boutons radio en groupes.

Les options d'un même groupe possèdent le même nom, name, mais chaque option doit avoir une valeur (value) différente.

La balise à utiliser est toujours  <input>, avec cette fois la valeur radio pour l'attribut type :

<form method="get" action="">
    <p>
        Veuillez indiquer la tranche d'âge dans laquelle vous vous situez :<br>
        <input type="radio" name="age" value="moins15" id="moins15"> <label for="moins15">Moins de 15 ans</label><br>
        <input type="radio" name="age" value="medium15-25" id="medium15-25"> <label for="medium15-25">15-25 ans</label><br>
        <input type="radio" name="age" value="medium25-40" id="medium25-40"> <label for="medium25-40">25-40 ans</label><br>
        <input type="radio" name="age" value="plus40" id="plus40"> <label for="plus40">Plus de 40 ans</label>
    </p>
</form>

Ce qui donne :

Pourquoi avoir mis le même nom pour chaque option ?

Tout simplement pour que le navigateur sache de quel groupe votre sélection fait partie. Essayez d'enlever les attributs  name, vous verrez qu'il devient possible de sélectionner tous les éléments d'options. Or, ce n'est pas ce que l'on veut ; c'est pour cela qu'on les lie entre eux en leur donnant un nom identique.

Vous noterez que cette fois on a choisi un id différent de name.

En effet, les valeurs de name étant identiques, on n'aurait pas pu différencier les id.

Si vous avez deux zones d'options différentes, il faut donner un  name unique à chaque groupe :

<form method="get" action="">
    <p>
        Veuillez indiquer la tranche d'âge dans laquelle vous vous situez :<br>
        <input type="radio" name="age" value="moins15" id="moins15"> <label for="moins15">Moins de 15 ans</label><br>
        <input type="radio" name="age" value="medium15-25" id="medium15-25"> <label for="medium15-25">15-25 ans</label><br>
        <input type="radio" name="age" value="medium25-40" id="medium25-40"> <label for="medium25-40">25-40 ans</label><br>
        <input type="radio" name="age" value="plus40" id="plus40"> <label for="plus40">Plus de 40 ans</label>
    </p>
    <p>
        Sur quel continent habitez-vous ?<br>
        <input type="radio" name="continent" value="europe" id="europe"> <label for="europe">Europe</label><br>
        <input type="radio" name="continent" value="afrique" id="afrique"> <label for="afrique">Afrique</label><br>
        <input type="radio" name="continent" value="asie" id="asie"> <label for="asie">Asie</label><br>
        <input type="radio" name="continent" value="amerique" id="amerique"> <label for="amerique">Amérique</label><br>
        <input type="radio" name="continent" value="oceanie" id="oceanie"> <label for="oceanie">Océanie</label>
    </p>
</form>

Ce qui donne :

Insérez une liste déroulante avec les balises   <select>  et  <option>

Le fonctionnement est un peu différent :

  1. On utilise la balise <select> </select>  pour indiquer le début et la fin de la liste déroulante.

  2. On ajoute l'attribut  name  à la balise pour donner un nom à la liste.

  3. Puis, à l'intérieur du  <select> </select>, on place plusieurs balises <option> </option>  (une par choix 
     possible), pour donner à chacune d'elles un attribut  value afin d'identifier ce que le visiteur a 
     choisi :

<form method="get" action="">
    <p>
        <label for="pays">Dans quel pays habitez-vous ?</label><br>
        <select name="pays" id="pays">
            <option value="espagne">Espagne</option>
            <option value="royaume-uni">Royaume-Uni</option>
            <option value="canada">Canada</option>
            <option value="japon">Japon</option>
        </select>
    </p>
</form>

Si vous voulez qu'une option soit sélectionnée par défaut, utilisez l'attribut  selected  :

<option value="canada" selected>Canada</option>

À vous d'essayer pour voir ce que ça donne :

Entraînez-vous à manipuler tous ces éléments d’option avec le CodePen P4C2.

Et mais c'est bien joli tout ça, mais normalement on rajoute un bouton d'envoi à la fin d'un formulaire pour que le visiteur puisse nous envoyer les données saisies, non ?

Bien vu ! C'est ce que l'on voit dans le prochain chapitre !

En résumé

- Un formulaire est englobé par la balise HTML   <form></form>  à laquelle on ajoute les attributs  method  et  action.

- On utilise ensuite d'autres balises HTML pour permettre au visiteur du site de saisir des informations :

           - la balise orpheline  <input>  pour un champ de saisie monoligne ;

           - la balise en paire  <textarea> </textarea>  pour un champ de saisie multiligne ;

           - la balise en paire  <select> </select>  suivi d'options avec la balise en paire  
             <option> </option>  pour une liste déroulante.

- Le champ  <input>  peut également être configuré pour saisir d'autres types de données : e-mail, URL, numéro 
  de téléphone, date, etc.

- Un label peut être relié à n'importe quel input avec l'attribut  for  correspondant à l'attribut  id  pour 
  le champ utilisé.

Vous avez vu les bases des formulaires ! Bravo à vous ! Mais nous n'avons pas encore terminé : dans le chapitre suivant, vous verrez comment regrouper vos champs, et envoyer votre formulaire. Ce sera l'occasion de vous exercer sur le projet de Robbie Lens. Alors à tout de suite !

##############################################################################################################

Finalisez un formulaire et ajoutez un bouton d'envoi

Il ne nous reste plus qu'à agrémenter notre formulaire de quelques dernières fonctionnalités, puis nous pourrons ajouter le bouton d'envoi du formulaire.

Regroupez des champs avec la balise  <fieldset>

Si votre formulaire grossit et comporte beaucoup de champs, il peut être utile de les regrouper au sein de plusieurs balises <fieldset>.

Chaque <fieldset> peut contenir une légende avec la balise<legend>. Regardez cet exemple :

<form method="get" action="">
  <fieldset>
     <legend>Vos coordonnées</legend> <!-- Titre du fieldset --> 
     <label for="nom">Quel est votre nom ?</label>
     <input type="text" name="nom" id="nom">
     <label for="prenom">Quel est votre prénom ?</label>
     <input type="text" name="prenom" id="prenom">
     <label for="email">Quel est votre e-mail ?</label>
     <input type="email" name="email" id="email">
  </fieldset>
  <fieldset>
     <legend>Votre souhait</legend> <!-- Titre du fieldset -->
     <p>
        Faites un souhait que vous voudriez voir exaucé :
        <input type="radio" name="souhait" value="riche" id="riche"> <label for="riche">Être riche</label>
        <input type="radio" name="souhait" value="celebre" id="celebre"> <label for="celebre">Être célèbre</label>
        <input type="radio" name="souhait" value="intelligent" id="intelligent"> <label for="intelligent">Être <strong>encore</strong> plus intelligent</label>
        <input type="radio" name="souhait" value="autre" id="autre"> <label for="autre">Autre...</label>
     </p>
     <p>
        <label for="precisions">Si "Autre", veuillez préciser :</label>
        <textarea name="precisions" id="precisions" cols="40" rows="4"></textarea>
     </p>
  </fieldset>
</form>

On ajoute un peu de CSS pour avoir un style sur notre fieldset et voilà le résultat :

Vous voyez : chaque groupe est comme "encadré". Cela vous permet d'ajouter du style, et de visuellement séparer vos éléments entre eux.

Manipulez le résultat obtenu avec le CodePen P4C3.

Sélectionnez automatiquement un champ avec autofocus

Vous pouvez également placer automatiquement le curseur dans l'un des champs de votre formulaire, avec l'attribut autofocus. Dès que le visiteur chargera la page, le curseur se placera dans ce champ. C'est très pratique d'un point de vue de l'expérience utilisateur.

Par exemple, pour que le curseur soit par défaut dans le champ  prenom, on écrit :

<input type="text" name="prenom" id="prenom" autofocus>

Rendez un champ obligatoire avec required
Vous pouvez également faire en sorte qu'un champ soit obligatoire, en lui donnant l'attributrequired.

<input type="text" name="prenom" id="prenom" required>

Le navigateur indiquera alors au visiteur, si le champ est vide au moment de l'envoi, qu'il doit impérativement être rempli.

On dispose de pseudo-classes en CSS pour changer le style :

des éléments requis avec  :required  ;

et des éléments invalides avec  :invalid  .

N'oubliez pas non plus que vous disposez de la pseudo-classe  :focus  pour changer l'apparence d'un champ lorsque le curseur se trouve à l'intérieur.

Exemple pour colorer le fond des champs requis :

:required {
    background-color:#F2A3BB;
}

Créez le bouton d'envoi du formulaire avec  <input>

Pour créer le bouton d'envoi, c'est encore la balise  <input>  qu'on utilise.

Elle existe en quatre versions :

   1. type="submit"  : c'est celui que vous utiliserez le plus souvent. Le visiteur sera conduit à la page 
      indiquée dans l'attribut  action  du formulaire.

   2. type="reset"  : remise à zéro du formulaire (testez pour voir).

   3. type="image"  : équivalent du bouton  submit, présenté cette fois sous forme d'image. Rajoutez 
      l'attribut  src  pour indiquer l'URL de l'image.

   4. type="button"  : bouton générique, qui n'aura (par défaut) aucun effet. En général, ce bouton est géré 
      en JavaScript pour exécuter des actions sur la page, mais nous n'apprendrons pas à le faire dans le 
      cadre de ce cours.

On peut changer le texte affiché à l'intérieur des boutons avec l'attribut  value :

<input type="submit" value="Envoyer">

Ce qui nous donne un input qui a l'apparence d'un bouton :

Cela ne fonctionne pas sur CodePen, c'est normal. Essayez de créer cela en code local si vous voulez voir ce qui se passe.

Lorsque vous cliquez sur le bouton Envoyer, le formulaire vous amène alors à la page indiquée dans l'attribut  action. Le seul petit souci, c'est que nous n'avons pas de page à indiquer en backend ici.

Comme je vous l'avais dit au chapitre précédent, puisque nous avons gardé l'attribut  action  vide dans la balise  <form>  , le navigateur comprend qu'il doit rester sur la même page. En revanche, si vous observez bien la barre URL de votre navigateur, vous verrez le contenu de votre formulaire apparaître à la suite :

index.html?nom=nebra&prenom=mathieu&email=coucou%40mathieu.com&souhait=autre&precisions=Apprendre+le+machine+learning

Donc, il se passe bien quelque chose !

Mais comme je l'avais dit au chapitre précédent, le HTML et CSS ne sont pas suffisants pour traiter ces informations. Il est nécessaire d'apprendre un nouveau langage, comme le PHP, pour pouvoir “récupérer” les informations saisies et décider quoi en faire.

Cela tombe bien, j'ai aussi rédigé un cours sur le langage PHP pour ceux que cela intéresse !

À vous de jouer !

Vous allez pouvoir créer un formulaire de contact pour Robbie Lens !

Pour cela, rendez-vous sur GitHub pour avoir la base de code pour faire l’exercice sur la branche P4C3-exercice.

Vous y trouverez la structure de la nouvelle section à ajouter dans la page d'accueil. À vous de jouer pour :

  - ajouter un champ nom avec le label associé ;

  - ajouter un champ email avec le label associé ;

  - ajouter un textarea ayant pour label message ;

  - créer un bouton de validation "Envoyer". 

  - changer le lien du bouton “Un projet?Écrivez-moi” pour le faire pointer vers le formulaire

Le formulaire aura une méthode  get  et restera vide pour l'attribut  action  .

Pour ce qui est du style du formulaire, vous trouverez le résultat final du site de Robbie Lens.

Alors, qu’est-ce que ça donne de votre côté ? Voici la solution sur la branche P4C3-solution.

En résumé

- Il est possible de regrouper les champs au sein d'une balise  <fieldset>  qui comporte une légende, avec la 
  balise  <legend>.

- On peut sélectionner automatiquement un champ en précisant  l'attribut autofocus.

- Il est également possible de rendre un champ obligatoire avec l'attribut  required.

- Le bouton qui permet de valider le formulaire est créé à partir d'une balise input en faisant :  
  <input type="submit" value="Envoyer">

Dans le prochain chapitre, nous allons voir comment rendre une page responsive afin qu'elle s'adapte aux différentes tailles d'écran. Alors à tout de suite !

##############################################################################################################

Utilisez le responsive design avec les Media Queries

Appliquez une media query avec  @media

Les media queries sont des règles qui indiquent quand on doit appliquer des propriétés CSS, en fonction de la taille de l'écran sur lequel s'affiche le site web.

En fait, les maquettes pour les différentes versions d'écrans sont conçues dès l'élaboration du design. C'est-à-dire que la présentation du contenu va changer :

Ok mais concrètement, comment on fait pour écrire une media query ?

La syntaxe est un peu particulière, mais rassurez-vous si vous n'arrivez pas à vous en souvenir : vous pourrez toujours aller la chercher sur internet, et la copier-coller.

Voilà à quoi cela ressemble :

@media screen and (max-width: 1200px) {
/* Insérez vos propriétés CSS ici, avec vos sélecteurs*/
}

Les tailles que nous indiquons avec  min-width  ou  max-width  sont souvent appelées "points de ruptures", ou breakpoints en anglais, car ce sont les points où le design change.

Ici, cela signifie que le style écrit entre les accolades ne sera appliqué que pour les écrans dont la taille est inférieure ou égale à 1 200 pixels.

Attention, afin que les Media Queries soient prises en compte correctement sur tous les dispositifs, il est également essentiel de rajouter dans l’en-tête (partie  <head>  de notre site) la ligne suivante :

<meta name="viewport" content="width=device-width, initial-scale=1.0">

Ici on demande a ce que le "viewport" du navigateur, c’est à dire la surface d’affichage du navigateur s’adapte à la largeur d’affichage de l’appareil. Cela permet notamment un affichage correct sur nos téléphones mobiles.

En effet les téléphones actuels ont une résolution native proche des écrans HD. Par exemple un iPhone 12Pro a une résolution native de 1 170 x 2 532 pixels. Si nous ne mettons pas la balise meta viewport, l’affichage de notre site serait le même que sur un écran de cette taille, donc on y verrait pas grand chose. Par contre avec cette balise l’affichage se fait sur une base de 390 x 844 pixels. Cela permet donc d’assurer un affichage standard sur tous les mobiles.

Utilisez les règles disponibles

Il existe de nombreuses règles permettant de construire des media queries. Mais pour ne pas vous perdre, je vous ai uniquement listé les plus utilisées :

- height  : hauteur de la zone d'affichage (fenêtre) ;

- width  : largeur de la zone d'affichage (fenêtre) ;

- orientation  : orientation du périphérique (portrait ou paysage) ;

- media  : type d'écran de sortie. Avec la valeur la plus utilisée :

       - screen  : écran “classique”,

       - all  : tout type de média,

       - print  : imprimante (pratique pour formater un contenu pour l’imprimer).

On peut rajouter le préfixe  min-  ou  max-  devant la plupart de ces règles. Ainsi,  min-width  signifie “largeur minimale”, max-height  signifie “hauteur maximale”, etc.

Les règles peuvent être combinées à l'aide des mots suivants:

      - only  : “uniquement” ;

      - and  : “et” ;

      - not   : “non”.

Voici quelques exemples de media queries pour vous aider à bien comprendre le principe :

/* Sur les écrans, quand la largeur de la fenêtre fait au maximum 1280px */
@media screen and (max-width: 1280px)
/* Sur tous types d'écran, quand la largeur de la fenêtre est comprise entre 1024px et 1280px */
@media all and (min-width: 1024px) and (max-width: 1280px)
/* Sur tous types d'écrans orientés verticalement */
@media all and (orientation: portrait)

Les media queries sont surtout utilisées pour adapter le design du site aux différentes largeurs d'écran.

Faisons un test tout simple : nous allons changer la couleur et la taille du texte selon que la fenêtre fait plus ou moins de 1 024 pixels de large :

/* Paragraphes en bleu par défaut */
p {
    color: blue;
}
/* Nouvelles règles si la fenêtre fait au plus 1024px de large */
@media screen and (max-width: 1024px) {
    p {
        color: red; 
        background-color: black;
        font-size: 1.2em;
    }
}

Dans notre feuille CSS, nous avons d'abord demandé à ce que le texte des paragraphes soit écrit en bleu ; jusque-là, rien de nouveau. En revanche, nous avons ajouté une media query qui s'applique à tous les écrans dont la largeur ne dépasse pas  1024px  . À l'intérieur, nous avons appliqué des règles CSS sur les paragraphes pour les écrire plus gros et en rouge.

Résultat : la page n'a pas la même apparence selon la taille de la fenêtre. Essayez de la redimensionner, pour voir !

Codez des interfaces responsives

Maintenant que vous savez comment sélectionner des éléments en fonction des différentes tailles d'écran, vous allez également pouvoir tirer profit des différentes astuces pour adapter votre contenu.

Exploitez les minimum et maximum
On peut demander à ce qu'un bloc ait des dimensions minimales et maximales. C'est très pratique, car cela nous permet de définir des dimensions “limites” pour que notre site s'adapte aux différentes résolutions d'écran de nos visiteurs :

 - min-width : largeur minimale ;

 - min-height : hauteur minimale ;

 - max-width : largeur maximale ;

 - max-height : hauteur maximale.

Par exemple, on peut demander à ce qu'une image occupe  50%  de la largeur et exiger qu'elle fasse au moins 400 pixels de large dans tous les cas :

img {
    width: 50%;
    min-width: 400px;
}

Observez le résultat en modifiant la largeur de la fenêtre de votre navigateur.Vous allez voir que, si celle-ci est trop petite, le paragraphe se force à occuper au moins 400 pixels de largeur.

Coupez ce qui dépasse avec  overflow

Lorsqu'on commence à définir des dimensions précises pour nos blocs, comme on vient de le faire, il arrive qu'ils deviennent trop petits pour le texte qu'ils contiennent.

Les propriétés CSS que nous allons voir ici ont justement été créées pour contrôler les dépassements… et décider quoi faire si jamais cela devait arriver.

Supposons que vous ayez un long paragraphe et que vous vouliez (pour une raison qui ne regarde que vous) qu'il fasse  250px  de large et  110px  de haut. Ajoutons-lui une bordure et remplissons-le de texte… à ras bord :

p {
    width: 250px;
    height: 110px;
    text-align: justify;
    border: 1px solid black;
}

Et voilà ce que ça donne :

Horreur ! Le texte dépasse des limites du paragraphe !

Eh oui ! Vous avez demandé des dimensions précises, vous les avez eues ! Mais… le texte ne tient pas à l'intérieur d'un si petit bloc.

Si vous voulez que le texte ne dépasse pas les limites du paragraphe, il va falloir utiliser la propriété CSS overflow. Voici les valeurs qu'elle peut accepter :

  - visible  (par défaut) : si le texte dépasse les limites de taille, il reste visible et sort volontairement 
    du bloc ;

  - hidden : si le texte dépasse les limites, il sera tout simplement caché. On ne pourra pas voir tout le 
    texte ;

  - scroll : là encore, le texte sera caché s'il dépasse les limites. Sauf que cette fois, le navigateur 
    mettra en place des barres de défilement pour qu'on puisse lire l'ensemble du texte. C'est un peu comme un 
    cadre à l'intérieur de la page ;

  - auto : c'est le mode “pilote automatique”. En gros, c'est le navigateur qui décide de mettre ou non des 
    barres de défilement (il n'en mettra que si c'est nécessaire). C'est la valeur que je conseille d'utiliser 
    le plus souvent.

Avec  overflow: hidden;  le texte est donc coupé (on ne peut pas voir la suite) :

Essayons maintenant  overflow: auto;  avec le code CSS suivant :

p {
    width: 250px;
    height: 110px;
    text-align: justify;
    overflow: auto;
}

Vous pouvez manipuler ce bout de code dans le CodePen P4C4.

Dans le cas spécifique du texte, vous pouvez même utiliser  text-overflow: ellipsis;  combiné à  white-space: no-wrap;  : ils vous permettent d'afficher "..." à la fin de votre texte pour signaler à l'utilisateur que le texte a été tronqué (je vous laisse jeter un œil à la documentation sur ce lien).

Eurêka ! Des barres de défilement nous permettent maintenant de consulter le contenu qui n'était pas visible.

Par la suite, si vous voulez aller plus loin, vous pouvez rejoindre un parcours de formation sur OpenClassrooms :

   - Intégrateur web

   - Développeur web

À vous de jouer !

Dernier rendez-vous avec le site de Robbie Lens. Cette fois-ci, vous allez adapter le site pour les formats mobile !

Vous trouverez la base de code pour faire l’exercice sur la branche P4C4-exercice.

  - Réduisez la taille des titres à  2em  .

  - Remplacez les  width  pour  .accueil-introduction  et  form  par la propriété  max-width  sur la page 
    d'accueil, avec une valeur de  1000px  .

  - Cachez la section "Tarifs" sur la page "À propos".

  - Tous les éléments qui sont disposés à l'horizontale basculent à la verticale à partir de la taille d'écran  
    996px  (introduction, grilles photos et formulaire).

  - Le  padding  sur le côté des pages passe de  80px  à  20px  .

  - Les liens de navigation du header passent à la verticale et sont centrés.

Si vous voulez avoir des idées de comment organiser les éléments sans regarder la solution, vous pouvez vous référer à la version en ligne du site de Robbie Lens.

Comme d'habitude, vous pouvez accéder à la solution sur la branche P4C4-solution.

En résumé

Pour adapter un site internet aux différentes tailles d'écran, plusieurs techniques sont nécessaires :

  - Il faut tout d'abord réussir à sélectionner les différentes tailles d'écran disponibles, afin d'appliquer 
    le style souhaité. 

  - Pour cela, on a recours aux media queries qui sont la manière de "conditionner" le style appliqué : "Si 
    l'écran de l'utilisateur est plus petit que la taille  XXXpx  , alors appliquer ce style".

  - Il est ensuite possible d'utiliser les différentes astuces :

         - display: none  pour cacher un élément qui ne rentre pas sur les tailles d'écran plus petites ;

         - overflow  pour permettre de scroller avec la souris dans un élément container ;

         - min-width  et  max-width  pour définir des tailles minimum et maximum.

Bravo à vous ! Vous avez quasiment terminé ce cours ! 

Dans le prochain chapitre, nous vous donnerons quelques astuces pour aller plus loin dans votre apprentissage du HTML et du CSS mais de manière générale, dans le monde du Web.

##############################################################################################################

Allez plus loin

Alors que ce cours touche à sa fin, la tentation est grande de penser que l'on a tout vu. Mais on ne finit jamais d’apprendre. Ce chapitre a pour but de vous donner quelques directions pour compléter votre apprentissage. Alors ne soyez pas triste, car vous n'avez pas fini de faire des découvertes !

Apprenez à créer un site web interactif avec Javascript

C'est probablement l'un des premiers langages que vous voudrez apprendre, maintenant que vous avez des connaissances en HTML et CSS.

À quoi JavaScript peut-il bien servir ? On ne peut pas tout faire avec HTML et CSS ?

On peut faire déjà beaucoup de choses en HTML et CSS mais, lorsqu'on veut rendre sa page plus interactive, un langage comme JavaScript devient indispensable.

JavaScript est un langage de programmation que l'on utilise fréquemment sur le Web, en plus de HTML et CSS. Javascript permet de rajouter de l'interactivité à un site web (réponses quand on clique sur un bouton ou des données entrées dans des formulaires, composition dynamique, animations…).

Voici quelques exemples de ce à quoi JavaScript peut servir :

  - modifier des propriétés CSS sans avoir à recharger la page (exemple : vous pointez sur une image, et le 
    fond de votre site change de couleur (ce n'est pas possible à faire avec un  :hover  car cela concerne 
    deux balises différentes ; c'est bien là une limite du CSS) ;

  - modifier le code source HTML sans avoir à recharger la page, pendant que le visiteur consulte la page ;

  - il permet aussi d'afficher des boîtes de dialogue à l'écran du visiteur…

  - … ou encore de modifier la taille de la fenêtre.

JavaScript est régulièrement utilisé aujourd'hui pour faire de l'AJAX (Asynchronous JavaScript And XML). Cette technique permet de modifier une partie de la page web que le visiteur consulte, en échangeant des données avec le serveur. Cela donne l'impression que les pages sont plus dynamiques et plus réactives.

Les navigateurs sont de plus en plus efficaces dans leur traitement de JavaScript, ce qui fait que les pages qui utilisent JavaScript sont de plus en plus réactives. On peut ainsi arriver aujourd'hui à créer des sites qui deviennent littéralement des applications web, l'équivalent de logiciels, mais disponibles sous forme de sites web ! Un exemple célèbre : Google Docs, la suite bureautique de Google, disponible sur le Web.

Pour démarrer votre apprentissage de JavaScript, rendez-vous sur le cours Apprenez à programmer avec JavaScript. 

Apprenez à créer un site web dynamique avec PHP

Les langages qui permettent de créer des sites web dynamiques s'exécutent sur le “serveur” qui contient votre site web. Les langages serveur permettent de générer la page web lorsque le visiteur arrive sur votre site. Chaque visiteur peut donc obtenir une page web personnalisée suivant ses besoins !

Les langages “côté serveur” sont nombreux. L'un des plus connus, PHP : Facile à utiliser et puissant, il est utilisé notamment par Facebook… et OpenClassrooms.

Tous les langages ne servent pas aux mêmes choses, mais ils se complètent. Si vous combinez HTML + CSS + JavaScript + PHP, par exemple, vous pouvez :

  - faire de l'AJAX (échanges de données entre la page et le serveur) ;

  - effectuer des calculs ;

  - stocker des informations dans des bases de données ;

  - bref, faire des sites web dynamiques !

J'ai d'ailleurs rédigé un cours sur PHP : Concevez votre site web avec PHP et MySQL. Vous êtes nombreux à suivre après avoir appris HTML et CSS !

Souvenez-vous de la balise  <form>  : je vous avais expliqué comment créer des formulaires, mais pas comment récupérer les informations saisies par vos visiteurs. Il vous faut obligatoirement un langage serveur, comme PHP, pour récupérer et traiter ces données !

Au final, ce type de langage vous permet de réaliser vos rêves les plus fous sur votre site web :

  - forum ;

  - newsletter ;

  - compteur de visiteurs ;

  - système de news automatisé ;

  - gestion de membres ;

  - jeux web (jeux de stratégie, élevage d'animaux virtuels…) ;

  - etc.

Bonne découverte !

Prenez du recul sur ce que vous pouvez encore apprendre

Nous avons mis au point une Carte des Connaissances !

Il s'agit d'une carte heuristique (mindmap) sur laquelle nous avons listé nos cours en développement. Ils sont regroupés par thématiques et langages. Vous pourrez y voir en un clin d'œil les différents technologies et spécialisations auxquels vous pourrez vous former avec OpenClassrooms.

Consultez le glossaire des balises HTML et propriétés CSS

Si vous avez besoin de revenir facilement sur un point du cours, vous pouvez télécharger et consulter :

  1. La liste des balises HTML. 

  2. La liste des propriétés CSS.

En outre, n'hésitez pas à consulter le site de Mozilla Developer pour connaître les spécificités de toutes les balises HTML et propriétés CSS (grâce au glossaire situé à gauche de la page).

Téléchargez la fiche résumé du cours

lien : https://course.oc-static.com/courses/1603881/Fiche+HTML+CSS.pdf

Merci d'avoir suivi ce cours et à bientôt sur OpenClassrooms !

##############################################################################################################

!!!!!!!!!!!!!!! Quiz : Utiliser des fonctionnalités avancées de HTML et CSS !!!!!!!!!!!!!!!

Compétences évaluées
Utiliser des fonctionnalités avancées de HTML et CSS

Question 1
Le CodePen Quiz P4Q1 présente un tableau.

Quelle ligne de code faut-il ajouter à la place du commentaire pour avoir un tableau sans espace entre les lignes et les colonnes ?

- border: 1px solid black;

- border-collapse: separate;

- display: grid;

- border-collapse: collapse; (o) (B)

""""""""" Réponse """"""""""
Ici, vous avez un tableau dont les bords ne sont pas collés. Comme nous l'avons vu ensemble dans le cours, il suffit d'ajouter  border-collapse: collapse  pour que les cellules soient bien collées les unes aux autres. En effet, nous avons déjà ajouté des bordures à notre tableau, la valeur  separate  pour  border-collapse  ne permet pas de rapprocher les cellules. Et enfin, CSS Grid ne nous est d'aucune utilité ici.

""""""""""""""""""""""""""""

Question 2

Parmi les éléments ci-dessous, lesquels ne concernent pas les tableaux en HTML et CSS ?

Attention, plusieurs réponses sont possibles.

- tfooter (o) (B)

- thead

- td

- caption

- legend (o) (B)

""""""""" Réponse """"""""""
Parcourons ensemble les différentes options valides proposées ici.

L'élément  thead  permet d'indiquer l'en-tête du tableau,  td  correspond à une cellule,  caption  permet de donner un titre au tableau.

En revanche,  tfooter  ne correspond à rien : pour indiquer le pied du tableau, il s'agit de  tfoot, et  legend  est utilisé dans les formulaires.

Il fallait donc choisir les options 1 et 5 !

""""""""""""""""""""""""""""

Question 3

J'ai le code suivant :

<form method="get" action="">
    <label id="prenom" for="prenom">Votre prénom</label>
    <input type="text" name="surnom">
</form>

Mais je ne comprends pas : quand je clique sur mon  label  rien ne se passe, le champ de saisie n'est pas sélectionné.

Qu'est-ce qui pose problème ici ?

- La balise  input  doit se situer avant la balise  label

- L'attribut  id  n'est pas sur la balise  input (o) (B)

- La valeur de  name  est  surnom  et non  prenom

- Il n'y a pas de bouton de validation du formulaire

""""""""" Réponse """"""""""
Ici, c'est bien parce que l'attribut  id  n'est pas précisé dans la balise  input  que le lien ne se fait pas entre l'input  et le  label.

Rien à voir avec le bouton de validation ou l'ordre de l'input  et du  label.

Par ailleurs, l'attribut  name  n'a rien à voir avec le lien entre  label  et  input.

Il fallait donc choisir la réponse 2.

""""""""""""""""""""""""""""

Question 4

Parmi les valeurs suivantes, lesquelles permettent bien de créer un champ de saisie ? Vous pouvez essayer les différentes options pour voir !

Attention, plusieurs réponses sont possibles.

- type="email" (o) (B)

- type="date" (o) (B)

- type="telephone" 

- type="URL" (o) (B)

""""""""" Réponse """"""""""
Ici, seule la troisième option ne correspond pas à un véritable type d'input : il faut choisir  tel  car  telephone  n’existe pas. Il fallait donc choisir les réponses 1, 2 et 4 !

""""""""""""""""""""""""""""

Question 5

Parmi les bouts de code suivants, lesquels permettent d'obtenir le résultat ci-dessous ?

La capture d'écran montre une liste déroulante à la suite de la question Quelle plante souhaitez-vous acheter ?


- <form method="get" action="">
    <caption for="plante">Quelle plante souhaitez-vous acheter ?</caption>
    <select name="plante" id="plante">
        <option value="philodendron">Philodendron</option>
        <option value="calathea">Calathea</option>
        <option value="pilea">Pilea</option>
        <option value="yucca">Yucca</option>
    </select>
</form>

- <form method="get" action="">
    <label for="plante">Quelle plante souhaitez-vous acheter ?</label>
    <option name="plante" id="plante">
        <select value="philodendron">Philodendron</select>
        <select value="calathea">Calathea</select>
        <select value="pilea">Pilea</select>
        <select value="yucca">Yucca</select>
    </option>
</form>

- <form method="get" action="">
    <label for="plante">Quelle plante souhaitez-vous acheter ?</label> (o) (B)
    <select name="plante" id="plante">
        <option value="philodendron">Philodendron</option>
        <option value="calathea">Calathea</option>
        <option value="pilea">Pilea</option>
        <option value="yucca">Yucca</option>
    </select>
</form>

""""""""" Réponse """"""""""
La première option utilise la balise  <caption>. Sauf que cette balise ne permet pas de créer un libellé dans un formulaire.

La deuxième réponse, quant à elle, inverse les balises  <select>  et  <option>.

Il fallait donc choisir l'option 3.

""""""""""""""""""""""""""""

Question 6

J'ai le bout de code suivant :

<form method="post" action="">
    <fieldset>
        <title>Vos coordonnées</title>
        <label for="nom">Quel est votre nom ?</label>
        <input type="text" name="nom" id="nom">
        <label for="prenom">Quel est votre prénom ?</label>
        <input type="text" name="prenom" id="prenom">
        <option for="email">Quel est votre e-mail ?</option>
        <input type="email" name="email" id="email">
        <button type="submit" value="Envoyer">
    </form>
</fieldset>

Qu'est-ce qui ne va pas ici ? (Vous pouvez essayer de repérer les erreurs sans regarder les propositions, pour vous entraîner.)

Attention, plusieurs réponses sont possibles.

- La balise  <form>  est fermée avant la balise  <fieldset> (o) (B)

- Le  fieldset  utilise une balise  <title>  au lieu d'utiliser  <legend> (o) (B)

- Le bouton de validation est un  button  et non un  input (o) (B)

- Il y a une  option  qui se balade seule (o) (B)

- La valeur de l'attribut  method  est  post

""""""""" Réponse """"""""""
Pas mal de choses posent problème dans ce bout de code. En effet, les explications citées dans les propositions 1, 2, 3 et 4 sont bien des erreurs. En revanche, le fait que l'attribut  method  ait pour valeur  post  n'est pas du tout un problème. Il fallait donc choisir  1, 2, 3 et 4.

""""""""""""""""""""""""""""

Question 7

Quelle est la signification de la media query suivante ?

@media all and (min-width: 960px) and (max-width: 1024px)

- Tous les médias de moins de  960px  et plus de  1024px

- Les écrans de moins  960px  et plus de  1024px

- Tous les médias de plus de  960px  et moins de  1024px (o) (B)

- Tous les écrans de moins de 960px et de plus de 1024px

""""""""" Réponse """"""""""
La media query utilisée ici concerne tous les médias.

Par ailleurs, il est précisé  min-width: 960px  et  max-width: 1024px. Cela signifie que la taille concernée est supérieure à  960px  et inférieure à  1024px.

Il fallait donc choisir l'option 3 !

""""""""""""""""""""""""""""

Question 8

Quelles astuces sont couramment utilisées pour rendre un site responsive ?

Attention, plusieurs réponses sont possibles.

- Changer  flex-direction  de  row  à  column (o) (B)

- Définir un  overflow: auto  ou  scroll (o) (B)

- Définir une  width  fixe

- Prévoir plusieurs breakpoints avec des comportements associés (o) (B)

""""""""" Réponse """"""""""
Souvent, changer l'orientation de ses éléments au sein de  flex  permet d'adapter une grille à un écran plus étroit. De la même manière, quand la hauteur ou la largeur n'est pas suffisante, il peut vous arriver d'avoir à exploiter la propriété  overflow. Et pour tout ça, vous pouvez définir des media queries avec des breakpoints et des comportements associés.

En revanche, définir une  width  fixe ne vous aidera pas à rendre un site responsive.

Il fallait donc choisir les options 1, 2 et 4.

""""""""""""""""""""""""""""

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!