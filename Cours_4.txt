                               Utilisez des fonctionnalités avancées de HTML et CSS

Ajoutez des tableaux

Créez un tableau en HTML et CSS

La balise en paire <table> </table> indique le début et la fin d'un tableau. Cette balise est de type  block  , on va donc la placer en dehors d'un paragraphe ou d'une  div  .

Indiquez les valeurs du tableau avec les balises HTML  <tr>  et  <td> 

Pour construire un tableau ligne par ligne, on indique pour chaque ligne, <tr>  (pour table row ou "rangée du tableau"), le contenu des différentes cellules,<td>  (pour table data ou "donnée" ou "entrée") :

  - <tr> </tr> indique le début et la fin d'une ligne du tableau ;

  - <td> </td>  indique le début et la fin du contenu d'une cellule.

On a une balise de ligne  <tr>  qui englobe un groupe de cellules  <td>  .

Par exemple, si je veux faire un tableau à deux lignes, avec trois cellules par ligne (donc trois colonnes), je devrai taper ceci :

<table>
    <tr>
        <td>Carmen</td>
        <td>33 ans</td>
        <td>Espagne</td>
    </tr>
    <tr>
        <td>Michelle</td>
        <td>26 ans</td>
        <td>États-Unis</td>
    </tr>
</table>

Bon, le résultat est un peu déprimant :

C'est un tableau, ça ? Le texte s'est écrit à la suite et il n'y a même pas de bordures…

Oui, un tableau HTML sans CSS paraît bien vide…

Ajoutez des bordures au tableau HTML grâce à la propriété CSS  border

Pour ajouter des bordures, on utilise le sélecteur CSS correspondant !

On utilise td pour sélectionner toutes les cellules des tableaux de la page. Donc pour créer des bordures à nos cellules, on fait :

td /* Toutes les cellules des tableaux... */
{
    border: 1px solid black; /* auront une bordure de 1px */
}

Et voici le résultat juste en dessous :

Hum, ce n'est pas encore aussi parfait que ce qu'on voudrait. En effet, on aimerait qu'il n'y ait qu'une seule bordure entre deux cellules, or ce n'est pas le cas ici.

Collez les bordures du tableau HTML avec la propriété CSS  border-collapse
border-collapse est une propriété CSS qui permet de “coller les bordures entre elles”. Elle peut prendre deux valeurs :

  1. collapse  : les bordures seront collées entre elles, c'est l'effet qu'on recherche ici ;

  2. separate  : les bordures seront dissociées (valeur par défaut).

On écrit :

table {
    border-collapse: collapse;
}

td {
    border: 1px solid black;
}

Ce qui nous permet d'obtenir :

Voilà qui est mieux !

Ajoutez une ligne d'en-tête au tableau avec la balise HTML  <th>

La ligne d'en-tête se crée avec un  <tr>  mais les cellules qu'elle contient sont, cette fois, encadrées par des balises <th>  (pour table header ou "en-tête de tableau" en français) et non pas  <td>  !

<table>
    <tr>
        <th>Nom</th>
        <th>Âge</th>
        <th>Pays</th>
    </tr>
    <tr>
        <td>Carmen</td>
        <td>33 ans</td>
        <td>Espagne</td>
    </tr>
    <tr>
        <td>Michelle</td>
        <td>26 ans</td>
        <td>États-Unis</td>
    </tr>
</table>

La ligne d'en-tête est très facile à reconnaître pour deux raisons :

  - les cellules sont des<th>  au lieu des  <td>  habituels ;

  - c'est la première ligne du tableau (c'est idiot, mais encore faut-il le préciser).

Comme le nom des cellules est un peu différent pour l'en-tête, il faut penser à mettre à jour le CSS pour lui dire d'appliquer une bordure sur les cellules normales et sur l'en-tête :

table {
    border-collapse: collapse;
}

td, th /* Mettre une bordure sur les td ET les th */ {
    border: 1px solid black;
}

Ce qui donne :

Comme vous pouvez le constater, le navigateur a mis en gras le texte des cellules d'en-tête. C'est ce que font en général les navigateurs mais, si vous le désirez, vous pouvez changer cela à coups de CSS : modifier la couleur de fond des cellules d'en-tête, leur police, leur bordure, etc. Pour cela, il vous suffit d'utiliser le sélecteur  th  dans le CSS !

Donnez un titre au tableau avec la balise HTML  <caption>
Normalement, tout tableau doit avoir un titre. Le titre permet de renseigner rapidement le visiteur sur le contenu du tableau. Notre exemple est constitué d'une liste de personnes… oui, mais alors ? Qu'est-ce que cela représente ? Sans titre de tableau, vous le voyez, on est un peu perdu.

Heureusement, il y a <caption> pour ajouter un titre à notre tableau  !

Cette balise se place tout au début du tableau, juste avant l'en-tête. C'est elle qui contient le titre du tableau :

<table>
    <caption>Passagers du vol 377</caption>
    <tr>
        <th>Nom</th>
        <th>Âge</th>
        <th>Pays</th>
    </tr>
    <tr>
        <td>Carmen</td>
        <td>33 ans</td>
        <td>Espagne</td>
    </tr>
    <tr>
        <td>Michelle</td>
        <td>26 ans</td>
        <td>États-Unis</td>
    </tr>
</table>

Et voilà le résultat :

Vous pouvez changer la position du titre avec la propriété CSS caption-side. Par défaut, la valeur est  top  (au-dessus du tableau), mais vous pouvez aussi indiquer  bottom  :  le titre sera alors placé en dessous du tableau.

Bon mais on étouffe encore un peu avec ce tableau très compacte !

Oui d'ailleurs, comment on fait pour ajouter des marges dans un tableau, avec du  padding  ?

Exactement, et ça se fait côté CSS avec la propriété padding!

Ajoutez des marges à un tableau HTML avec la propriété CSS  padding
Pour correctement ajouter des marges à toutes nos cellules, y compris celles de l'en-tête, on va ajouter la propriété CSS  padding sur les sélecteurs  td  et  th  à la fois (comme on l'avait fait pour ajouter des bordures, souvenez-vous) :

td, th {
    border: 1px solid black;
    padding: 15px;
}

Et voilà le résultat avec une marge de 15 pixels :

C'est mieux !

Et comment on fait pour centrer un tableau ? Par défaut il est à gauche…

C'est simple, et ça se passe une fois de plus dans le fichier CSS, cette fois, au niveau du sélecteur  table !

Centrez un tableau HTML avec la propriété CSS  margin
Un peu plus haut dans le chapitre avait utilisé le sélecteur  table  pour ajouter la propriété CSS  border-collapse  qui nous permettait de "coller" les cellules entre elles.

C'est également sous le sélecteur  table  qu'on va indiquer au navigateur de centrer le tableau sur la page grâce à la propriété CSS  margin  , pour laquelle on va préciser la valeur auto:

table {
    border-collapse: collapse;
    margin: auto;
}

Voici ce que ça donne :

Super ! Bon maintenant, voyons comment structurer un tableau un peu plus complexe. Nous avons appris à construire un petit tableau simple. Cela peut suffire dans la plupart des cas, mais vous aurez parfois besoin de réaliser des tableaux plus… complexes.

Structurez un grand tableau avec des balises HTML

Divisez un tableau avec les balises HTML  thead,  tbody et  tfoot
Si votre tableau est assez gros, vous aurez tout intérêt à le découper en plusieurs parties. Pour cela, il existe des balises HTML qui permettent de définir les trois “zones” du tableau :

  1. l'en-tête du tableau (en haut) se définit avec les balises <thead></thead>  

  2. le corps du tableau (au centre) se définit avec les balises <tbody></tbody>  

  3. le pied du tableau (en bas) se définit avec les balises <tfoot></tfoot>

Vous vous servirez de ces balises, surtout si votre tableau est assez gros, et que vous avez besoin de l'organiser plus clairement. Pour les “petits” tableaux, vous pouvez garder sans problème l'organisation plus simple que nous avons vue au début.

Ok d'accord, mais en fait, je vois bien ce qu'on peut mettre en en-tête et à l'intérieur du tableau, mais que mettre dans le pied de tableau ?

Vous pouvez par exemple y mettre un résumé, ou un total. Le pied de tableau se mettra, comme l'en-tête, par défaut, en gras :

Dans cet exemple de tableau, ce n'est pas forcément très parlant de mettre le même contenu dans l'en-tête et le pied du tableau. Mais cela peut être utile lorsqu'un tableau est très long.

Entraînez-vous et manipulez le code de ce tableau sur le CodePen P4C1a.

Vous l'aurez sûrement remarqué dans le code HTML : c'est un peu déroutant, mais il est conseillé d'écrire les balises dans l'ordre suivant :

  1. <thead>

  2. <tfoot>

  3. <tbody>

Fusionnez des cellules du tableau avec les attributs colspan et rowspan

Pour fusionner des cellules entre elles, il suffit d'ajouter un attribut dans la balise HTML <td>. Cela permet d'indiquer le nombre de cellules à fusionner entre elles (la balise des cellules).

II existe deux attributs pour deux types de fusions différentes :

  1. l'attribut  colspan  permet de fusionner des colonnes : la fusion s'effectue horizontalement, aussi bien 
     sur les lignes d'en-tête que sur le contenu lui-même. 

  2. l'attribut  rowspan  permet de fusionner des lignes : là, deux lignes seront groupées entre elles. La 
     fusion s'effectuera verticalement.

Voyons tout de suite à quoi cela peut ressembler :

Vous trouverez le code utilisé pour réaliser ce tableau dans le CodePen P4C1b.

Notez qu'on peut modifier l'alignement vertical du texte des cellules de tableaux avec la propriétévertical-align qu'on a vue dans le chapitre "Abordez d'autres techniques de mise en page".

À vous de jouer !

Vous allez maintenant pouvoir construire le tableau des tarifs de Robbie Lens !

Vous verrez que la base de code a été réorganisée :

  - le fichier CSS a été découpé en 4 fichiers CSS différents qui se trouvent dans le dossier  style ;

  - le fichier de base  style.css  est importé par chaque page ;

  - chaque page possède son propre fichier CSS.

Vous ajouterez les tarifs à la suite de la page "À propos", après le lien Call to action (appel à l’action).

Voilà à quoi le tableau devrait ressembler :

Comme d'habitude, vous trouverez la base de code pour faire l’exercice sur la branche P4C1-exercice, et vous pouvez consulter la solution sur la branche P4C1-solution pour vérifier vos acquis.

En résumé

- Un tableau s'insère avec la balise HTML  <table>  et se définit ligne par ligne avec  <tr>.

- Chaque ligne comporte des cellules  <td>  (cellules normales) ou  <th>   (cellules d'en-tête).

- Le titre du tableau se définit avec  <caption>.

- On peut ajouter une bordure aux cellules du tableau HTML avec la propriété CSS border  . Pour coller les 
  bordures entre elles, on utilise la propriété CSS  border-collapse.

- Un tableau peut être divisé en trois sections grâce aux balises HTML <thead>  (en-tête),  <tbody>  (corps) 
  et  <tfoot>  (bas du tableau). L'utilisation de ces balises n'est pas obligatoire.

- En HTML, on peut fusionner des cellules horizontalement avec l'attribut  colspan, ou verticalement avec  
  rowspan. Il faut indiquer combien de cellules doivent être fusionnées.

Dans le chapitre suivant, on va apprendre à créer des formulaires. Alors à tout de suite !

##############################################################################################################

Créez des formulaires

Pour créer un formulaire, vous aurez besoin de la balise HTML <form> </form>, elle permet d'indiquer le début et la fin du formulaire.

Voici les deux attributs indispensables pour construire un formulaire fonctionnel :

  1. L'attribut method indique par quel moyen les données vont être envoyées. Ne vous en préoccupez pas pour 
     le moment. Sachez juste que les méthodes les plus utilisées sont get et post.

  2. L'attribut action indique l'adresse de la page ou du programme qui va traiter les informations. 

Tout cela va nous permettre de créer la structure de base d’un formulaire en HTML :

<p>Texte avant le formulaire</p>
    <form method="get" action="">
        <p>Texte à l'intérieur du formulaire</p>
    </form>
<p>Texte après le formulaire</p>

Je donne la valeur  get  à l'attribut  method ; et je laisse un champ vide : " " pour  action.

Pourquoi est-ce qu'on le laisse un champ vide dans l'attribut  action  ?

Si notre projet comportait également du code en *backend, c'est là qu'on indiquerait une URL qui pourrait traiter notre formulaire. Mais ici, en laissant un champ vide, on indique à notre formulaire qu'on restera sur la même URL, ce qui nous permettra plus tard d'inspecter ce qu'on obtient, assez simplement.

*En règle générale, un site internet est composé de deux parties :

  1. une partie frontend, c’est la partie visible de notre site internet, celle qui s’affiche dans votre 
     navigateur grâce à HTML, CSS et JavaScript ; 

  2. une partie backend, qui se trouve hébergée et qui s’exécute sur un serveur web. Elle permet de faire des 
     tâches plus complexes, comme traiter un formulaire, envoyer un mail, sauvegarder des informations dans 
     une base de données, etc.

Voyons maintenant quelle balise HTML utiliser pour saisir du texte dans un formulaire.

Insérez des champs de texte avec la balise HTML  <input>

La balise HTML <input> est une balise orpheline.

On la retrouvera plusieurs fois dans ce chapitre. Souvent, ce sera la valeur de son attribut, type, qui changera selon le type de champ que l'on veut ajouter : texte monoligne, email, date, etc.

Ajoutez une zone de texte monoligne avec  <input type="text">
Une zone de texte monoligne est une zone de texte d’une seule ligne. On l'utilise pour des champs de texte qui ne requièrent que quelques mots, comme un nom ou un prénom, par exemple.

On ouvre avec la balise <input> et on précise la valeur de l'attribut (type="text" ) pour indiquer qu'il s'agit d'une zone de texte d'une seule ligne :

<input type="text">

Ensuite, il faut donner un nom à votre zone de texte ; pour cela on utilise l'attribut  name.

Ce nom n'apparaît pas sur la page, mais il est indispensable parce qu’il permettra plus tard d'identifier le champ d'où viennent les informations.

Commençons par demander au visiteur de renseigner son prénom. On écrit alors :

<input type="text" name="prenom">
Voici ce que cela donne pour un formulaire très basique avec uniquement notre champ de texte monoligne qui demande son prénom au visiteur du site :

<form method="get" action="">
    <input type="text" name="prenom">
</form>

Comment le visiteur saura qu'il faut renseigner son prénom si l'attribut name ne s'affiche pas ?

Bien vu ! Lorsqu’un visiteur tombe sur un champ de texte à saisir, il ne sait pas toujours ce qu'il doit y écrire. C'est justement le rôle du champ libellé !

Ajoutez un champ de libellé avec la balise HTML  <label> </label>

Un libellé est un champ de texte prérempli avec une indication pour guider le visiteur du site sur ce qu’il doit écrire. On crée un champ de libellé avec la balise HTML<label> </label>  :

<form method="get" action="">
    <label>Votre prénom</label> : <input type="text" name="prenom">
</form>

Mais cela ne suffit pas : il faut lier le label à la zone de texte.

Pour ce faire, on doit donner un nom à la zone de texte, non pas avec l'attribut  name  mais avec l'attribut id  (que l'on peut utiliser sur toutes les balises).

Un attribut  name  et un attribut id  sur le champ ? Cela ne va-t-il pas faire double emploi ?

 - L'attribut id est utilisé pour identifier l'élément HTML afin d’y accéder et de le manipuler. Il est donc 
   unique pour cet élément.

- L'attribut name, lui, réfère à la variable du formulaire que l’élément concerne. Ici, il n’y a qu’un seul 
  élément qui pourra référer à la variable  prenom  ;  name et  id  auront donc la même valeur. Mais lorsque 
  nous utiliserons des  checkbox  ou des  radio, plusieurs éléments correspondront à la même variable. Mais 
  nous verrons cela un peu plus tard, et vous comprendrez mieux. 

Pour lier le label au champ, il faut lui donner un attribut  for  qui a la même valeur que l' id  du champ :

<form method="get" action="">
    <p>
        <label for="prenom">Votre prénom</label> : <input type="text" name="prenom" id="prenom">
    </p>
</form>

Ce qui veut dire en français :

"Pour le champs de texte monoligne, nommé  prenom, il y aura un libellé "Votre prénom" qui s'affichera".

On peut ajouter un certain nombre d'autres attributs à la balise  <input>  pour personnaliser son fonctionnement :

 - agrandir le champ avec  size  ;

 - limiter le nombre de caractères que l'on peut saisir avec  maxlength  ;

 - pré-remplir le champ avec une valeur par défaut à l'aide de  value  ;

 - donner une indication sur le contenu du champ avec  placeholder . Cette indication disparaîtra dès que le 
   visiteur aura cliqué à l'intérieur du champ.

Dans l'exemple suivant, la zone de texte contient une indication permettant de comprendre ce qu'il faut saisir ; le champ fait 30 caractères de long, mais on ne peut écrire que 20 caractères maximum à l'intérieur :

<form method="get" action="">
    <p>
        <label for="prenom">Votre prénom :</label>
        <input type="text" name="prenom" id="prenom" placeholder="Ex. : Mathieu" size="30" maxlength="20">
    </p>
</form>

Testez vous-même le résultat pour observer le comportement du champ. En attendant, voici le rendu du champ dans son état initial (avant que le visiteur ne renseigne quoi que ce soit) :

Ajoutez une zone de texte multiligne avec  <textarea> </textarea>

Une zone de texte multiligne est une zone de texte de plusieurs lignes. C’est utilisé dans le cas où le visiteur d’un site aurait besoin d’écrire un paragraphe de texte dans un formulaire.

Pour créer une zone de texte multiligne, on utilise :<textarea> </textarea>  .

Comme pour tout autre élément du formulaire, il faut lui donner un nom avec  name  et utiliser un  label   qui explique de quoi il s'agit :

<form method="get" action="">
    <p>
        <label for="ameliorer">Des conseils pour améliorer mon site ?</label><br>
        <textarea name="ameliorer" id="ameliorer"></textarea>
    </p>
</form>

Et voici le résultat en image :

Grâce à la poignée située en bas à droite de la zone de texte, le visiteur peut étirer le champ pour mieux visualiser ce qu'il écrit (ce qui n'est pas possible avec un champ de texte monoligne) :

Mais on peut modifier la taille par défaut du  <textarea>, et ce, de deux façons différentes :

  1. En appliquant au  <textarea>  les propriétés CSS width  et height .

  2. En ajoutant à la balise  <textarea>  les attributs :

      1. rows  (indique le nombre de lignes qui peuvent être affichées) ;

      2. et  cols  (indique le nombre de colonnes qui peuvent être affichées). 

Vous pouvez pré-remplir le  <textarea>  avec une valeur par défaut. Dans ce cas, on n'utilise pas l'attribut  value  : on écrit tout simplement le texte par défaut entre la balise ouvrante et la balise fermante !

Ok mais on n'avait pas parlé plus haut de la balise  input  ? Et expliqué que ce serait l'attribut  type  qui changerait selon le type de champ ? Or on a déjà vu deux autres champs (libellé et multiligne qui ont des balises spécifique, je ne comprends pas.

Vous avez raison, les balises libellé et zone de texte multiligne sont spécifiques : libellé n'est pas un champ de saisie (le visiteur ne rempli pas un libellé, c'est juste une indication pour lui) ; et le textearea permet de spécifier un champs étirable.

Cela dit, en dehors du champs de texte monoligne, il existe d'autres type de saisie. On utilisera alors la balise  input  et l'attribut  type  (pour lequel on indiquera un type de champ en particulier).

Utilisez  <input>  pour des formats de saisie particuliers

Vous pouvez créer de nombreux types de champs de saisie :

Type de champ                     Code

un e-mail                         <input type="email">

une URL                           <input type="url">

                                  On peut demander à saisir une adresse absolue, 
                                  commençant généralement par  http:// 

un numéro de téléphone            <input type="tel">

un nombre entier                  <input type="number">

                                  Le champ s'affiche en général avec des petites flèches pour 
                                  changer la valeur.

un curseur 
(aussi appelé “slider”)           <input type="range">

                                  On utilise range pour demander au visiteur 
                                  une valeur comprise entre deux bornes :

une date                          Différents types de champs de sélection de date existent, comme 

                                  <input type="date"> pour sélectionner une date :


                                  Mais il existe des variantes :

                                  <input type="time"> pour l'heure ;

                                  <input type="week">  pour la semaine ;

                                  <input type="month"  pour le mois ;

                                  <input type="datetime">  pour la date et l'heure (avec 
                                  gestion du décalage horaire) ;

                                  <input type="datetime-local">  pour la date et l'heure (sans 
                                  gestion du décalage horaire).

                                  Vérifiez bien quels navigateurs gèrent ce type de champ, 
                                  il n'est pas encore complètement reconnu.

une recherche                     <input type="search">


Pour les types de champs nombre, date et curseur, vous pouvez personnaliser le fonctionnement du champ avec les attributs suivants :

      - min  : valeur minimale autorisée ;

      - max  : valeur maximale autorisée ;

      - step  : c'est un “pas” de déplacement. Si vous indiquez un pas de 2, le champ n'acceptera que des 
                valeurs de 2 en 2 (par exemple 0, 2, 4, 6…).

Laissez le visiteur choisir une option

HTML offre plusieurs manières de choisir une ou des option(s) dans un formulaire. Ce sont des éléments qui demandent au visiteur de faire un choix parmi une liste de possibilités, comme :

   1. Les cases à cocher (plusieurs choix possibles).

   2. Les boutons radio (un seul choix possible).

   3. Les listes déroulantes (un seul choix possible).

Insérez des cases à cocher avec  <input type="checkbox">

On crée une case à cocher avec la balise  <input>  en spécifiant le type  checkbox qui signifie "case à cocher" en français :

<input type="checkbox" name="choix">

Rajoutez un  <label>  et le tour est joué :

<form method="get" action="">
    <p>
        Cochez les aliments que vous aimez manger :<br>
        <input type="checkbox" name="frites" id="frites"> <label for="frites">Frites</label><br>
        <input type="checkbox" name="steak" id="steak"> <label for="steak">Steak</label><br>
        <input type="checkbox" name="epinards" id="epinards"> <label for="epinards">Épinards</label><br>
        <input type="checkbox" name="huitres" id="huitres"> <label for="huitres">Huitres</label>
    </p>
</form>

Ce qui donne, une liste d'aliments (le visiteur a la possibilité d'en cocher plusieurs) :

N'oubliez pas de donner un nom différent à chaque case à cocher, cela vous permettra d'identifier plus tard lesquelles ont été cochées par le visiteur.

Vous pouvez faire en sorte qu'une case soit cochée par défaut, avec l'attribut  checked  :  <input type="checkbox" name="choix" checked>.

Normalement, tout attribut possède une valeur. Dans le cas présent, en revanche, ajouter une valeur n'est pas obligatoire : la présence de l'attribut suffit à faire comprendre à l'ordinateur que la case doit être cochée. Si cela vous perturbe, sachez que vous pouvez donner n'importe quelle valeur à l'attribut (certains développeurs écrivent parfois checked="checked" mais c'est un peu redondant). Dans tous les cas, la case sera cochée.

Insérez des boutons radio avec  <input type="radio">

Les boutons radio permettent au visiteur de faire un choix (et un seul) parmi une liste de possibilités. Il y a une petite difficulté supplémentaire par rapport aux cases à cocher : il faut organiser les boutons radio en groupes.

Les options d'un même groupe possèdent le même nom, name, mais chaque option doit avoir une valeur (value) différente.

La balise à utiliser est toujours  <input>, avec cette fois la valeur radio pour l'attribut type :

<form method="get" action="">
    <p>
        Veuillez indiquer la tranche d'âge dans laquelle vous vous situez :<br>
        <input type="radio" name="age" value="moins15" id="moins15"> <label for="moins15">Moins de 15 ans</label><br>
        <input type="radio" name="age" value="medium15-25" id="medium15-25"> <label for="medium15-25">15-25 ans</label><br>
        <input type="radio" name="age" value="medium25-40" id="medium25-40"> <label for="medium25-40">25-40 ans</label><br>
        <input type="radio" name="age" value="plus40" id="plus40"> <label for="plus40">Plus de 40 ans</label>
    </p>
</form>

Ce qui donne :

Pourquoi avoir mis le même nom pour chaque option ?

Tout simplement pour que le navigateur sache de quel groupe votre sélection fait partie. Essayez d'enlever les attributs  name, vous verrez qu'il devient possible de sélectionner tous les éléments d'options. Or, ce n'est pas ce que l'on veut ; c'est pour cela qu'on les lie entre eux en leur donnant un nom identique.

Vous noterez que cette fois on a choisi un id différent de name.

En effet, les valeurs de name étant identiques, on n'aurait pas pu différencier les id.

Si vous avez deux zones d'options différentes, il faut donner un  name unique à chaque groupe :

<form method="get" action="">
    <p>
        Veuillez indiquer la tranche d'âge dans laquelle vous vous situez :<br>
        <input type="radio" name="age" value="moins15" id="moins15"> <label for="moins15">Moins de 15 ans</label><br>
        <input type="radio" name="age" value="medium15-25" id="medium15-25"> <label for="medium15-25">15-25 ans</label><br>
        <input type="radio" name="age" value="medium25-40" id="medium25-40"> <label for="medium25-40">25-40 ans</label><br>
        <input type="radio" name="age" value="plus40" id="plus40"> <label for="plus40">Plus de 40 ans</label>
    </p>
    <p>
        Sur quel continent habitez-vous ?<br>
        <input type="radio" name="continent" value="europe" id="europe"> <label for="europe">Europe</label><br>
        <input type="radio" name="continent" value="afrique" id="afrique"> <label for="afrique">Afrique</label><br>
        <input type="radio" name="continent" value="asie" id="asie"> <label for="asie">Asie</label><br>
        <input type="radio" name="continent" value="amerique" id="amerique"> <label for="amerique">Amérique</label><br>
        <input type="radio" name="continent" value="oceanie" id="oceanie"> <label for="oceanie">Océanie</label>
    </p>
</form>

Ce qui donne :

Insérez une liste déroulante avec les balises   <select>  et  <option>

Le fonctionnement est un peu différent :

  1. On utilise la balise <select> </select>  pour indiquer le début et la fin de la liste déroulante.

  2. On ajoute l'attribut  name  à la balise pour donner un nom à la liste.

  3. Puis, à l'intérieur du  <select> </select>, on place plusieurs balises <option> </option>  (une par choix 
     possible), pour donner à chacune d'elles un attribut  value afin d'identifier ce que le visiteur a 
     choisi :

<form method="get" action="">
    <p>
        <label for="pays">Dans quel pays habitez-vous ?</label><br>
        <select name="pays" id="pays">
            <option value="espagne">Espagne</option>
            <option value="royaume-uni">Royaume-Uni</option>
            <option value="canada">Canada</option>
            <option value="japon">Japon</option>
        </select>
    </p>
</form>

Si vous voulez qu'une option soit sélectionnée par défaut, utilisez l'attribut  selected  :

<option value="canada" selected>Canada</option>

À vous d'essayer pour voir ce que ça donne :

Entraînez-vous à manipuler tous ces éléments d’option avec le CodePen P4C2.

Et mais c'est bien joli tout ça, mais normalement on rajoute un bouton d'envoi à la fin d'un formulaire pour que le visiteur puisse nous envoyer les données saisies, non ?

Bien vu ! C'est ce que l'on voit dans le prochain chapitre !

En résumé

- Un formulaire est englobé par la balise HTML   <form></form>  à laquelle on ajoute les attributs  method  et  action.

- On utilise ensuite d'autres balises HTML pour permettre au visiteur du site de saisir des informations :

           - la balise orpheline  <input>  pour un champ de saisie monoligne ;

           - la balise en paire  <textarea> </textarea>  pour un champ de saisie multiligne ;

           - la balise en paire  <select> </select>  suivi d'options avec la balise en paire  
             <option> </option>  pour une liste déroulante.

- Le champ  <input>  peut également être configuré pour saisir d'autres types de données : e-mail, URL, numéro 
  de téléphone, date, etc.

- Un label peut être relié à n'importe quel input avec l'attribut  for  correspondant à l'attribut  id  pour 
  le champ utilisé.

Vous avez vu les bases des formulaires ! Bravo à vous ! Mais nous n'avons pas encore terminé : dans le chapitre suivant, vous verrez comment regrouper vos champs, et envoyer votre formulaire. Ce sera l'occasion de vous exercer sur le projet de Robbie Lens. Alors à tout de suite !

##############################################################################################################

